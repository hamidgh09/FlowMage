define dso_local void @_ZN15FlowRateLimiterC2Ev(%class.FlowRateLimiter* %0) unnamed_addr #2 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
_ZN23VirtualFlowSpaceElementC2Ev.exit:
  %1 = getelementptr %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %2 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i8 0, i8* %3, align 4, !tbaa !20277
  %4 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 0
  %5 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %4, i64 0, i32 0
  store %class.Element* null, %class.Element** %5, align 8, !tbaa !20278
  %6 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 0, i32 1
  store i32 -2, i32* %6, align 8, !tbaa !20280
  %7 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 1, i32 0
  store %class.Element* null, %class.Element** %7, align 8, !tbaa !20278
  %8 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 1, i32 1
  store i32 -2, i32* %8, align 8, !tbaa !20280
  %9 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 2, i32 0
  store %class.Element* null, %class.Element** %9, align 8, !tbaa !20278
  %10 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 2, i32 1
  store i32 -2, i32* %10, align 8, !tbaa !20280
  %11 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 3, i32 0
  store %class.Element* null, %class.Element** %11, align 8, !tbaa !20278
  %12 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 3, i32 1
  store i32 -2, i32* %12, align 8, !tbaa !20280
  %13 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7
  store %class.Router* null, %class.Router** %13, align 8, !tbaa !20281
  %14 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8
  store i32 -1, i32* %14, align 8, !tbaa !20282
  %15 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10
  %16 = bitcast %class.Vector* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(17) %16, i8 0, i64 17, i1 false) #34
  %17 = load i32, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %19 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 1
  store %"class.Element::Port"* %4, %"class.Element::Port"** %19, align 8, !tbaa !20284
  %20 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 0
  store %"class.Element::Port"* %4, %"class.Element::Port"** %20, align 8, !tbaa !20284
  %21 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i64 1
  store i32 0, i32* %21, align 4, !tbaa !20283
  %22 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i64 0
  store i32 0, i32* %22, align 8, !tbaa !20283
  %23 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 1
  store i32 -1, i32* %23, align 4, !tbaa !22530
  store i32 2, i32* %2, align 8, !tbaa !20267
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [45 x i8*] }, { [45 x i8*] }* @_ZTV15FlowRateLimiter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !20285
  %24 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 1, i32 0, i32 1
  store i32 1, i32* %24, align 4, !tbaa !23036
  %25 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 1, i32 0, i32 0
  store i32 0, i32* %25, align 8, !tbaa !23038
  %26 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 1, i32 0, i32 2
  store i64 -1, i64* %26, align 8
  %27 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 1, i32 1, i32 0
  store i32 0, i32* %27, align 8, !tbaa !23039
  %28 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 1, i32 1, i32 1
  store i64 0, i64* %28, align 8, !tbaa !23041
  %29 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 2
  %30 = load i32, i32* @click_nthreads, align 4, !tbaa !20283
  %31 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 2, i32 1
  store i32 %30, i32* %31, align 8, !tbaa !23042
  %32 = zext i32 %30 to i64
  %33 = shl nuw nsw i64 %32, 6
  %34 = tail call noalias i8* @aligned_alloc(i64 64, i64 %33) #34
  %35 = load i32, i32* %31, align 8, !tbaa !23042
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %40, label %37

37:                                               ; preds = %_ZN23VirtualFlowSpaceElementC2Ev.exit
  %38 = zext i32 %35 to i64
  %39 = shl nuw nsw i64 %38, 6
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %34, i8 0, i64 %39, i1 false)
  br label %40

40:                                               ; preds = %37, %_ZN23VirtualFlowSpaceElementC2Ev.exit
  %41 = bitcast %class.per_thread.7416* %29 to i8**
  store i8* %34, i8** %41, align 8, !tbaa !23044
  ret void
}

define internal void @_ZN15FlowRateLimiterD2Ev(%class.FlowRateLimiter* %0) unnamed_addr #7 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %2 = getelementptr %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [45 x i8*] }, { [45 x i8*] }* @_ZTV15FlowRateLimiter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !20285
  %3 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 2, i32 1
  %4 = load i32, i32* %3, align 8, !tbaa !23042
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 2
  %8 = bitcast %class.per_thread.7416* %7 to i8**
  %9 = load i8*, i8** %8, align 8, !tbaa !23044
  tail call void @free(i8* %9) #34
  store i32 0, i32* %3, align 8, !tbaa !23042
  br label %10

10:                                               ; preds = %6, %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [38 x i8*] }, { [38 x i8*] }* @_ZTV7Element, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !20285
  %11 = load i32, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %12 = add nsw i32 %11, -1
  store i32 %12, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %13 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 0
  %14 = load %"class.Element::Port"*, %"class.Element::Port"** %13, align 8, !tbaa !20284
  %15 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 0
  %16 = icmp uge %"class.Element::Port"* %14, %15
  %17 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  %18 = bitcast [2 x i32]* %17 to %"class.Element::Port"*
  %19 = icmp ule %"class.Element::Port"* %14, %18
  %20 = and i1 %19, %16
  %21 = icmp eq %"class.Element::Port"* %14, null
  %22 = or i1 %21, %20
  br i1 %22, label %25, label %23

23:                                               ; preds = %10
  %24 = bitcast %"class.Element::Port"* %14 to i8*
  tail call void @_ZdaPv(i8* %24) #55
  br label %25

25:                                               ; preds = %23, %10
  %26 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 1
  %27 = load %"class.Element::Port"*, %"class.Element::Port"** %26, align 8, !tbaa !20284
  %28 = icmp uge %"class.Element::Port"* %27, %15
  %29 = icmp ule %"class.Element::Port"* %27, %18
  %30 = and i1 %29, %28
  %31 = icmp eq %"class.Element::Port"* %27, null
  %32 = or i1 %31, %30
  br i1 %32, label %35, label %33

33:                                               ; preds = %25
  %34 = bitcast %"class.Element::Port"* %27 to i8*
  tail call void @_ZdaPv(i8* %34) #55
  br label %35

35:                                               ; preds = %33, %25
  %36 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10
  %37 = bitcast %class.Vector* %36 to i8**
  %38 = load i8*, i8** %37, align 8, !tbaa !20288
  %39 = icmp eq i8* %38, null
  br i1 %39, label %_ZN11FlowElementD2Ev.exit, label %40

40:                                               ; preds = %35
  tail call void @_ZdaPv(i8* nonnull %38) #55
  br label %_ZN11FlowElementD2Ev.exit

_ZN11FlowElementD2Ev.exit:                        ; preds = %40, %35
  ret void
}

define internal void @_ZN15FlowRateLimiterD0Ev(%class.FlowRateLimiter* %0) unnamed_addr #7 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %2 = getelementptr %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [45 x i8*] }, { [45 x i8*] }* @_ZTV15FlowRateLimiter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !20285
  %3 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 2, i32 1
  %4 = load i32, i32* %3, align 8, !tbaa !23042
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 2
  %8 = bitcast %class.per_thread.7416* %7 to i8**
  %9 = load i8*, i8** %8, align 8, !tbaa !23044
  tail call void @free(i8* %9) #34
  store i32 0, i32* %3, align 8, !tbaa !23042
  br label %10

10:                                               ; preds = %6, %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [38 x i8*] }, { [38 x i8*] }* @_ZTV7Element, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !20285
  %11 = load i32, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %12 = add nsw i32 %11, -1
  store i32 %12, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %13 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 0
  %14 = load %"class.Element::Port"*, %"class.Element::Port"** %13, align 8, !tbaa !20284
  %15 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 0
  %16 = icmp uge %"class.Element::Port"* %14, %15
  %17 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  %18 = bitcast [2 x i32]* %17 to %"class.Element::Port"*
  %19 = icmp ule %"class.Element::Port"* %14, %18
  %20 = and i1 %19, %16
  %21 = icmp eq %"class.Element::Port"* %14, null
  %22 = or i1 %21, %20
  br i1 %22, label %25, label %23

23:                                               ; preds = %10
  %24 = bitcast %"class.Element::Port"* %14 to i8*
  tail call void @_ZdaPv(i8* %24) #55
  br label %25

25:                                               ; preds = %23, %10
  %26 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 1
  %27 = load %"class.Element::Port"*, %"class.Element::Port"** %26, align 8, !tbaa !20284
  %28 = icmp uge %"class.Element::Port"* %27, %15
  %29 = icmp ule %"class.Element::Port"* %27, %18
  %30 = and i1 %29, %28
  %31 = icmp eq %"class.Element::Port"* %27, null
  %32 = or i1 %31, %30
  br i1 %32, label %35, label %33

33:                                               ; preds = %25
  %34 = bitcast %"class.Element::Port"* %27 to i8*
  tail call void @_ZdaPv(i8* %34) #55
  br label %35

35:                                               ; preds = %33, %25
  %36 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10
  %37 = bitcast %class.Vector* %36 to i8**
  %38 = load i8*, i8** %37, align 8, !tbaa !20288
  %39 = icmp eq i8* %38, null
  br i1 %39, label %_ZN11FlowElementD2Ev.exit, label %40

40:                                               ; preds = %35
  tail call void @_ZdaPv(i8* nonnull %38) #55
  br label %_ZN11FlowElementD2Ev.exit

_ZN11FlowElementD2Ev.exit:                        ; preds = %40, %35
  ret void
}

define internal void @_ZN16FlowStateElementI15FlowRateLimiter8FRLState12StateCheckerE10push_batchEiP11PacketBatch(%class.FlowStateElement* nocapture readonly %0, i32 %1, %class.PacketBatch* %2) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %2, i64 48, i32 0
  %5 = getelementptr inbounds i8, i8* %4, i64 24
  %6 = bitcast i8* %5 to i16*
  %7 = load i16, i16* %6, align 2, !tbaa !20287
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  tail call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.259.16395, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6.13925, i64 0, i64 0), i32 439, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__._ZN11PacketBatch5countEv.13926, i64 0, i64 0)) #57
  unreachable

10:                                               ; preds = %3
  %11 = bitcast %class.PacketBatch* %2 to %class.Packet*
  %12 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %2, i64 136
  %13 = bitcast %class.PacketBatch* %12 to %class.Packet**
  %14 = getelementptr inbounds %class.FlowStateElement, %class.FlowStateElement* %0, i64 0, i32 0, i32 1
  %15 = getelementptr inbounds %class.FlowStateElement, %class.FlowStateElement* %0, i64 1
  %16 = bitcast %class.FlowStateElement* %15 to i8*
  %17 = load %class.FlowControlBlock**, %class.FlowControlBlock*** @fcb_queue, align 8, !tbaa !20284
  br label %18

18:                                               ; preds = %39, %10
  %19 = phi %class.Packet** [ %13, %10 ], [ %41, %39 ]
  %20 = phi %class.Packet* [ %11, %10 ], [ %21, %39 ]
  %21 = load %class.Packet*, %class.Packet** %19, align 8, !tbaa !20284
  %22 = getelementptr inbounds %class.Packet, %class.Packet* %20, i64 0, i32 6, i32 0, i32 0, i64 4
  %23 = bitcast i64* %22 to i32*
  %24 = load i32, i32* %23, align 4, !tbaa !20287
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %class.FlowControlBlock*, %class.FlowControlBlock** %17, i64 %26
  %28 = load %class.FlowControlBlock*, %class.FlowControlBlock** %27, align 8, !tbaa !20284
  %29 = getelementptr inbounds %class.FlowControlBlock, %class.FlowControlBlock* %28, i64 0, i32 5
  %30 = bitcast %union.anon.28.5842* %29 to [0 x i8]*
  %31 = load i32, i32* %14, align 4, !tbaa !22530
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [0 x i8], [0 x i8]* %30, i64 0, i64 %32
  %34 = getelementptr inbounds i8, i8* %33, i64 24
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 8, !tbaa !23041
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %18
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(32) %33, i8* nonnull align 8 dereferenceable(32) %16, i64 32, i1 false) #34
  br label %39

39:                                               ; preds = %38, %18
  %40 = icmp eq %class.Packet* %21, null
  %41 = getelementptr inbounds %class.Packet, %class.Packet* %21, i64 0, i32 6, i32 6
  br i1 %40, label %42, label %18

42:                                               ; preds = %39
  %43 = getelementptr inbounds %class.FlowStateElement, %class.FlowStateElement* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 6, i64 1
  %44 = load i32, i32* %43, align 4, !tbaa !20283
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %42
  tail call void @__assert_fail(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.56.14329, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.96.15137, i64 0, i64 0), i32 568, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__PRETTY_FUNCTION__._ZNK7Element4portEbi.14331, i64 0, i64 0)) #57
  unreachable

47:                                               ; preds = %42
  %48 = getelementptr inbounds %class.FlowStateElement, %class.FlowStateElement* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 1
  %49 = load %"class.Element::Port"*, %"class.Element::Port"** %48, align 8, !tbaa !20284
  %50 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %49, i64 0, i32 0
  %51 = load %class.Element*, %class.Element** %50, align 8, !tbaa !20278
  %52 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %49, i64 0, i32 1
  %53 = load i32, i32* %52, align 8, !tbaa !20280
  %54 = bitcast %class.Element* %51 to void (%class.Element*, i32, %class.PacketBatch*)***
  %55 = load void (%class.Element*, i32, %class.PacketBatch*)**, void (%class.Element*, i32, %class.PacketBatch*)*** %54, align 8, !tbaa !20285
  %56 = getelementptr inbounds void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %55, i64 5
  %57 = load void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %56, align 8
  tail call void %57(%class.Element* %51, i32 %53, %class.PacketBatch* %2)
  ret void
}

define internal i8* @_ZNK15FlowRateLimiter10class_nameEv(%class.FlowRateLimiter* nocapture readnone %0) unnamed_addr #4 comdat align 2 {
  ret i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.102.13106, i64 0, i64 0)
}

define internal i8* @_ZNK15FlowRateLimiter10port_countEv(%class.FlowRateLimiter* nocapture readnone %0) unnamed_addr #4 comdat align 2 {
  ret i8* getelementptr inbounds ([2 x i8], [2 x i8]* @_ZN7Element9PORTS_1_1E, i64 0, i64 0)
}

define internal i8* @_ZNK15FlowRateLimiter10processingEv(%class.FlowRateLimiter* nocapture readnone %0) unnamed_addr #4 comdat align 2 {
  ret i8* getelementptr inbounds ([2 x i8], [2 x i8]* @_ZN7Element4PUSHE, i64 0, i64 0)
}

define dso_local i32 @_ZN15FlowRateLimiter9configureER6VectorI6StringLm16EEP12ErrorHandler(%class.FlowRateLimiter* %0, %class.Vector.0* dereferenceable(16) %1, %class.ErrorHandler* %2) unnamed_addr #0 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca %class.Args, align 8
  %5 = bitcast %class.Args* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %5) #34
  %6 = bitcast %class.FlowRateLimiter* %0 to %class.Element*
  %7 = bitcast %class.Args* %4 to %class.FlowRateLimiter**
  store %class.FlowRateLimiter* %0, %class.FlowRateLimiter** %7, align 8, !tbaa !20294
  %8 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 0, i32 1
  store %class.ErrorHandler* %2, %class.ErrorHandler** %8, align 8, !tbaa !20296
  %9 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 0, i32 2
  store i8* null, i8** %9, align 8, !tbaa !20297
  %10 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 0, i32 3
  store i8 0, i8* %10, align 8, !tbaa !20298
  %11 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 5
  %12 = bitcast %class.Vector.2* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %12, i8 0, i64 16, i1 false) #34
  invoke void @_ZN4Args10initializeEPK6VectorI6StringLm16EE(%class.Args* nonnull %4, %class.Vector.0* nonnull %1)
          to label %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit unwind label %13

13:                                               ; preds = %3
  %14 = landingpad { i8*, i32 }
          cleanup
  %15 = bitcast %class.Vector.2* %11 to i8**
  %16 = load i8*, i8** %15, align 8, !tbaa !20299
  %17 = icmp eq i8* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %13
  call void @_ZdaPv(i8* nonnull %16) #55
  br label %19

19:                                               ; preds = %18, %13
  resume { i8*, i32 } %14

_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit: ; preds = %3
  %20 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 2
  %21 = load i8, i8* %20, align 2, !tbaa !20301, !range !20292
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %_ZN4Args7executeEv.exit, label %23

23:                                               ; preds = %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit
  %24 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 6
  %25 = load %"struct.Args::Slot"*, %"struct.Args::Slot"** %24, align 8, !tbaa !20304
  %26 = icmp eq %"struct.Args::Slot"* %25, null
  br i1 %26, label %.loopexit1, label %27

27:                                               ; preds = %23
  %28 = bitcast %"struct.Args::Slot"** %24 to i64*
  br label %32

.loopexit1:                                       ; preds = %.noexc, %23
  %29 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 3
  %30 = load i8, i8* %29, align 1, !tbaa !20305
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %.loopexit, label %.preheader

32:                                               ; preds = %.noexc, %27
  %33 = phi %"struct.Args::Slot"* [ %25, %27 ], [ %44, %.noexc ]
  %34 = getelementptr inbounds %"struct.Args::Slot", %"struct.Args::Slot"* %33, i64 0, i32 1
  %35 = bitcast %"struct.Args::Slot"** %34 to i64*
  %36 = load i64, i64* %35, align 8, !tbaa !20306
  store i64 %36, i64* %28, align 8, !tbaa !20304
  %37 = bitcast %"struct.Args::Slot"* %33 to void (%"struct.Args::Slot"*)***
  %38 = load void (%"struct.Args::Slot"*)**, void (%"struct.Args::Slot"*)*** %37, align 8, !tbaa !20285
  %39 = getelementptr inbounds void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %38, i64 2
  %40 = load void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %39, align 8
  invoke void %40(%"struct.Args::Slot"* nonnull %33)
          to label %.noexc unwind label %70

.noexc:                                           ; preds = %32
  %41 = load void (%"struct.Args::Slot"*)**, void (%"struct.Args::Slot"*)*** %37, align 8, !tbaa !20285
  %42 = getelementptr inbounds void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %41, i64 1
  %43 = load void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %42, align 8
  call void %43(%"struct.Args::Slot"* nonnull %33) #34
  %44 = load %"struct.Args::Slot"*, %"struct.Args::Slot"** %24, align 8, !tbaa !20304
  %45 = icmp eq %"struct.Args::Slot"* %44, null
  br i1 %45, label %.loopexit1, label %32

.loopexit:                                        ; preds = %.preheader, %.loopexit1
  %46 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 0
  store i8 0, i8* %46, align 8, !tbaa !20287
  store i8 0, i8* %29, align 1, !tbaa !20305
  call void @_ZN4ArgsD2Ev(%class.Args* nonnull %4) #34
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %5) #34
  %47 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 1
  %48 = call i32 @_ZN15FlowRateLimiter16configure_helperEP12TokenBucketXI26TokenBucketJiffyParametersIjEEP7ElementR6VectorI6StringLm16EEP12ErrorHandler(%class.FlowRateLimiter* undef, %class.TokenBucketX* nonnull %47, %class.Element* %6, %class.Vector.0* nonnull dereferenceable(16) %1, %class.ErrorHandler* %2)
  br label %72

.preheader:                                       ; preds = %.preheader, %.loopexit1
  %49 = phi i32 [ %66, %.preheader ], [ 0, %.loopexit1 ]
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 %50
  %52 = load i8, i8* %51, align 1, !tbaa !20287
  %53 = zext i8 %52 to i32
  %54 = add nuw nsw i32 %49, 1
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 %55
  %57 = add nuw nsw i32 %54, %53
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 %58
  %60 = bitcast i8* %59 to i8**
  %61 = load i8*, i8** %60, align 8, !tbaa !20284
  %62 = zext i8 %52 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* nonnull align 1 %56, i64 %62, i1 false)
  %63 = load i8, i8* %51, align 1, !tbaa !20287
  %64 = zext i8 %63 to i32
  %65 = add i32 %49, 9
  %66 = add i32 %65, %64
  %67 = load i8, i8* %29, align 1, !tbaa !20305
  %68 = zext i8 %67 to i32
  %69 = icmp ult i32 %66, %68
  br i1 %69, label %.preheader, label %.loopexit

_ZN4Args7executeEv.exit:                          ; preds = %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit
  call void @_ZN4ArgsD2Ev(%class.Args* nonnull %4) #34
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %5) #34
  br label %72

70:                                               ; preds = %32
  %71 = landingpad { i8*, i32 }
          cleanup
  call void @_ZN4ArgsD2Ev(%class.Args* nonnull %4) #34
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %5) #34
  resume { i8*, i32 } %71

72:                                               ; preds = %_ZN4Args7executeEv.exit, %.loopexit
  %73 = phi i32 [ %48, %.loopexit ], [ -1, %_ZN4Args7executeEv.exit ]
  ret i32 %73
}

define dso_local void @_ZN15FlowRateLimiter12add_handlersEv(%class.FlowRateLimiter* readonly %0) unnamed_addr #0 align 2 {
  %2 = bitcast %class.FlowRateLimiter* %0 to %class.Element*
  tail call void @_ZN7Element16add_read_handlerEPKcPF6StringPS_PvEij(%class.Element* %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15.12805, i64 0, i64 0), void (%class.String*, %class.Element*, i8*)* nonnull @_ZN15FlowRateLimiter12read_handlerEP7ElementPv, i32 0, i32 0)
  ret void
}

define internal i64 @_ZNK16FlowStateElementI15FlowRateLimiter8FRLState12StateCheckerE14flow_data_sizeEv(%class.FlowStateElement* nocapture readnone %0) unnamed_addr #4 comdat align 2 {
  ret i64 40
}

define internal i32 @_ZNK16FlowStateElementI15FlowRateLimiter8FRLState12StateCheckerE21flow_announce_managerEP7ElementP12ErrorHandler(%class.FlowStateElement* %0, %class.Element* %1, %class.ErrorHandler* %2) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %class.Element* %1 to i8* (%class.Element*, i8*)***
  %5 = load i8* (%class.Element*, i8*)**, i8* (%class.Element*, i8*)*** %4, align 8, !tbaa !20285
  %6 = getelementptr inbounds i8* (%class.Element*, i8*)*, i8* (%class.Element*, i8*)** %5, i64 17
  %7 = load i8* (%class.Element*, i8*)*, i8* (%class.Element*, i8*)** %6, align 8
  %8 = tail call i8* %7(%class.Element* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21.5833, i64 0, i64 0))
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  %11 = tail call i32 (%class.ErrorHandler*, i8*, ...) @_ZN12ErrorHandler7warningEPKcz(%class.ErrorHandler* %2, i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.22.5834, i64 0, i64 0), i32 15000, %class.FlowStateElement* %0, %class.Element* nonnull %1)
  br label %12

12:                                               ; preds = %10, %3
  ret i32 0
}

define dso_local void @_ZN15FlowRateLimiter12read_handlerEP7ElementPv(%class.String* noalias nocapture sret %0, %class.Element* nocapture readonly %1, i8* readnone %2) #0 align 2 {
  %4 = icmp eq i8* %2, null
  br i1 %4, label %5, label %73

5:                                                ; preds = %3
  %6 = getelementptr inbounds %class.Element, %class.Element* %1, i64 1, i32 5, i64 0, i32 1
  %7 = load i32, i32* %6, align 8, !tbaa !23042
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %.loopexit, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.Element, %class.Element* %1, i64 1, i32 5
  %11 = bitcast [4 x %"class.Element::Port"]* %10 to %"struct.per_thread<FlowRateLimiter::State>::A_t"**
  %12 = load %"struct.per_thread<FlowRateLimiter::State>::A_t"*, %"struct.per_thread<FlowRateLimiter::State>::A_t"** %11, align 8, !tbaa !23044
  %13 = icmp ult i32 %7, 17
  %14 = add i32 %7, -1
  %15 = icmp slt i32 %14, 0
  %16 = or i1 %13, %15
  br i1 %16, label %17, label %20

17:                                               ; preds = %54, %9
  %18 = phi i32 [ 0, %9 ], [ %24, %54 ]
  %19 = phi i64 [ 0, %9 ], [ %62, %54 ]
  br label %64

20:                                               ; preds = %9
  %21 = and i32 %7, 15
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32 16, i32 %21
  %24 = sub i32 %7, %23
  br label %25

25:                                               ; preds = %25, %20
  %26 = phi i32 [ 0, %20 ], [ %51, %25 ]
  %27 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %20 ], [ %52, %25 ]
  %28 = phi <4 x i64> [ zeroinitializer, %20 ], [ %47, %25 ]
  %29 = phi <4 x i64> [ zeroinitializer, %20 ], [ %48, %25 ]
  %30 = phi <4 x i64> [ zeroinitializer, %20 ], [ %49, %25 ]
  %31 = phi <4 x i64> [ zeroinitializer, %20 ], [ %50, %25 ]
  %32 = add <4 x i32> %27, <i32 4, i32 4, i32 4, i32 4>
  %33 = add <4 x i32> %27, <i32 8, i32 8, i32 8, i32 8>
  %34 = add <4 x i32> %27, <i32 12, i32 12, i32 12, i32 12>
  %35 = sext <4 x i32> %27 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = getelementptr inbounds %"struct.per_thread<FlowRateLimiter::State>::A_t", %"struct.per_thread<FlowRateLimiter::State>::A_t"* %12, <4 x i64> %35, i32 0, i32 0
  %40 = getelementptr inbounds %"struct.per_thread<FlowRateLimiter::State>::A_t", %"struct.per_thread<FlowRateLimiter::State>::A_t"* %12, <4 x i64> %36, i32 0, i32 0
  %41 = getelementptr inbounds %"struct.per_thread<FlowRateLimiter::State>::A_t", %"struct.per_thread<FlowRateLimiter::State>::A_t"* %12, <4 x i64> %37, i32 0, i32 0
  %42 = getelementptr inbounds %"struct.per_thread<FlowRateLimiter::State>::A_t", %"struct.per_thread<FlowRateLimiter::State>::A_t"* %12, <4 x i64> %38, i32 0, i32 0
  %43 = tail call <4 x i64> @llvm.masked.gather.v4i64.v4p0i64(<4 x i64*> %39, i32 8, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i64> undef), !tbaa !23045
  %44 = tail call <4 x i64> @llvm.masked.gather.v4i64.v4p0i64(<4 x i64*> %40, i32 8, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i64> undef), !tbaa !23045
  %45 = tail call <4 x i64> @llvm.masked.gather.v4i64.v4p0i64(<4 x i64*> %41, i32 8, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i64> undef), !tbaa !23045
  %46 = tail call <4 x i64> @llvm.masked.gather.v4i64.v4p0i64(<4 x i64*> %42, i32 8, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i64> undef), !tbaa !23045
  %47 = add <4 x i64> %43, %28
  %48 = add <4 x i64> %44, %29
  %49 = add <4 x i64> %45, %30
  %50 = add <4 x i64> %46, %31
  %51 = add i32 %26, 16
  %52 = add <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %53 = icmp eq i32 %51, %24
  br i1 %53, label %54, label %25, !llvm.loop !23047

54:                                               ; preds = %25
  %55 = add <4 x i64> %48, %47
  %56 = add <4 x i64> %49, %55
  %57 = add <4 x i64> %50, %56
  %58 = shufflevector <4 x i64> %57, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %59 = add <4 x i64> %57, %58
  %60 = shufflevector <4 x i64> %59, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %61 = add <4 x i64> %59, %60
  %62 = extractelement <4 x i64> %61, i32 0
  br label %17

.loopexit:                                        ; preds = %64, %5
  %63 = phi i64 [ 0, %5 ], [ %70, %64 ]
  tail call void @_ZN6StringC2Em(%class.String* %0, i64 %63)
  br label %77

64:                                               ; preds = %64, %17
  %65 = phi i32 [ %71, %64 ], [ %18, %17 ]
  %66 = phi i64 [ %70, %64 ], [ %19, %17 ]
  %67 = sext i32 %65 to i64
  %68 = getelementptr inbounds %"struct.per_thread<FlowRateLimiter::State>::A_t", %"struct.per_thread<FlowRateLimiter::State>::A_t"* %12, i64 %67, i32 0, i32 0
  %69 = load i64, i64* %68, align 8, !tbaa !23045
  %70 = add i64 %69, %66
  %71 = add nuw i32 %65, 1
  %72 = icmp ult i32 %71, %7
  br i1 %72, label %64, label %.loopexit, !llvm.loop !23048

73:                                               ; preds = %3
  %74 = getelementptr inbounds %class.String, %class.String* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.75.15356, i64 0, i64 0), i8** %74, align 8, !tbaa !20330
  %75 = getelementptr inbounds %class.String, %class.String* %0, i64 0, i32 0, i32 1
  store i32 7, i32* %75, align 8, !tbaa !20308
  %76 = getelementptr inbounds %class.String, %class.String* %0, i64 0, i32 0, i32 2
  store %"struct.String::memo_t"* null, %"struct.String::memo_t"** %76, align 8, !tbaa !20316
  br label %77

77:                                               ; preds = %73, %.loopexit
  ret void
}

define dso_local i32 @_ZN15FlowRateLimiter16configure_helperEP12TokenBucketXI26TokenBucketJiffyParametersIjEEP7ElementR6VectorI6StringLm16EEP12ErrorHandler(%class.FlowRateLimiter* nocapture readnone %0, %class.TokenBucketX* nocapture %1, %class.Element* %2, %class.Vector.0* dereferenceable(16) %3, %class.ErrorHandler* %4) local_unnamed_addr #0 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %class.Args, align 8
  %11 = alloca [2 x i32], align 4
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #34
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #34
  store i32 20, i32* %8, align 4, !tbaa !20283
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #34
  %15 = bitcast %class.Args* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %15) #34
  %16 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 0, i32 0
  store %class.Element* %2, %class.Element** %16, align 8, !tbaa !20294
  %17 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 0, i32 1
  store %class.ErrorHandler* %4, %class.ErrorHandler** %17, align 8, !tbaa !20296
  %18 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 0, i32 2
  store i8* null, i8** %18, align 8, !tbaa !20297
  %19 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 0, i32 3
  store i8 0, i8* %19, align 8, !tbaa !20298
  %20 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 5
  %21 = bitcast %class.Vector.2* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %21, i8 0, i64 16, i1 false) #34
  invoke void @_ZN4Args10initializeEPK6VectorI6StringLm16EE(%class.Args* nonnull %10, %class.Vector.0* nonnull %3)
          to label %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit unwind label %22

22:                                               ; preds = %5
  %23 = landingpad { i8*, i32 }
          cleanup
  %24 = bitcast %class.Vector.2* %20 to i8**
  %25 = load i8*, i8** %24, align 8, !tbaa !20299
  %26 = icmp eq i8* %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %22
  call void @_ZdaPv(i8* nonnull %25) #55
  br label %28

28:                                               ; preds = %27, %22
  resume { i8*, i32 } %23

_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit: ; preds = %5
  invoke void @_Z14args_base_readIjEvP4ArgsPKciRT_(%class.Args* nonnull %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.11751, i64 0, i64 0), i32 3, i32* nonnull dereferenceable(4) %7)
          to label %29 unwind label %.loopexit.split-lp

29:                                               ; preds = %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit
  invoke fastcc void @_Z14args_base_readI10SecondsArgjEvP4ArgsPKciT_RT0_(%class.Args* nonnull %10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5.7441, i64 0, i64 0), i32 0, i64 3, i32* nonnull dereferenceable(4) %8)
          to label %30 unwind label %.loopexit.split-lp

30:                                               ; preds = %29
  %31 = load i8, i8* %19, align 8, !tbaa !20298, !range !20292
  invoke void @_Z14args_base_readIjEvP4ArgsPKciRT_(%class.Args* nonnull %10, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3.7439, i64 0, i64 0), i32 0, i32* nonnull dereferenceable(4) %9)
          to label %32 unwind label %.loopexit.split-lp

32:                                               ; preds = %30
  %33 = load i8, i8* %19, align 8, !tbaa !20298, !range !20292
  invoke void @_ZN4Args14check_completeEv(%class.Args* nonnull %10)
          to label %.noexc unwind label %.loopexit.split-lp

.noexc:                                           ; preds = %32
  %34 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 2
  %35 = load i8, i8* %34, align 2, !tbaa !20301, !range !20292
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %_ZN4Args8completeEv.exit.thread, label %37

37:                                               ; preds = %.noexc
  %38 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 6
  %39 = load %"struct.Args::Slot"*, %"struct.Args::Slot"** %38, align 8, !tbaa !20304
  %40 = icmp eq %"struct.Args::Slot"* %39, null
  br i1 %40, label %.loopexit3, label %41

41:                                               ; preds = %37
  %42 = bitcast %"struct.Args::Slot"** %38 to i64*
  br label %46

.loopexit3:                                       ; preds = %.noexc1, %37
  %43 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 3
  %44 = load i8, i8* %43, align 1, !tbaa !20305
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %.loopexit, label %.preheader

46:                                               ; preds = %.noexc1, %41
  %47 = phi %"struct.Args::Slot"* [ %39, %41 ], [ %58, %.noexc1 ]
  %48 = getelementptr inbounds %"struct.Args::Slot", %"struct.Args::Slot"* %47, i64 0, i32 1
  %49 = bitcast %"struct.Args::Slot"** %48 to i64*
  %50 = load i64, i64* %49, align 8, !tbaa !20306
  store i64 %50, i64* %42, align 8, !tbaa !20304
  %51 = bitcast %"struct.Args::Slot"* %47 to void (%"struct.Args::Slot"*)***
  %52 = load void (%"struct.Args::Slot"*)**, void (%"struct.Args::Slot"*)*** %51, align 8, !tbaa !20285
  %53 = getelementptr inbounds void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %52, i64 2
  %54 = load void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %53, align 8
  invoke void %54(%"struct.Args::Slot"* nonnull %47)
          to label %.noexc1 unwind label %.loopexit2

.noexc1:                                          ; preds = %46
  %55 = load void (%"struct.Args::Slot"*)**, void (%"struct.Args::Slot"*)*** %51, align 8, !tbaa !20285
  %56 = getelementptr inbounds void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %55, i64 1
  %57 = load void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %56, align 8
  call void %57(%"struct.Args::Slot"* nonnull %47) #34
  %58 = load %"struct.Args::Slot"*, %"struct.Args::Slot"** %38, align 8, !tbaa !20304
  %59 = icmp eq %"struct.Args::Slot"* %58, null
  br i1 %59, label %.loopexit3, label %46

.preheader:                                       ; preds = %.preheader, %.loopexit3
  %60 = phi i32 [ %77, %.preheader ], [ 0, %.loopexit3 ]
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 7, i64 %61
  %63 = load i8, i8* %62, align 1, !tbaa !20287
  %64 = zext i8 %63 to i32
  %65 = add nuw nsw i32 %60, 1
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 7, i64 %66
  %68 = add nuw nsw i32 %65, %64
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 7, i64 %69
  %71 = bitcast i8* %70 to i8**
  %72 = load i8*, i8** %71, align 8, !tbaa !20284
  %73 = zext i8 %63 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* nonnull align 1 %67, i64 %73, i1 false)
  %74 = load i8, i8* %62, align 1, !tbaa !20287
  %75 = zext i8 %74 to i32
  %76 = add i32 %60, 9
  %77 = add i32 %76, %75
  %78 = load i8, i8* %43, align 1, !tbaa !20305
  %79 = zext i8 %78 to i32
  %80 = icmp ult i32 %77, %79
  br i1 %80, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %.preheader, %.loopexit3
  %81 = getelementptr inbounds %class.Args, %class.Args* %10, i64 0, i32 7, i64 0
  store i8 0, i8* %81, align 8, !tbaa !20287
  store i8 0, i8* %43, align 1, !tbaa !20305
  %82 = icmp eq i8 %31, 0
  %83 = icmp eq i8 %33, 0
  %84 = or i1 %82, %83
  br i1 %84, label %87, label %85

85:                                               ; preds = %.loopexit
  %86 = invoke i32 (%class.ErrorHandler*, i8*, ...) @_ZN12ErrorHandler5errorEPKcz(%class.ErrorHandler* %4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6.7442, i64 0, i64 0))
          to label %_ZN4Args8completeEv.exit.thread unwind label %.loopexit.split-lp

87:                                               ; preds = %.loopexit
  br i1 %83, label %90, label %88

88:                                               ; preds = %87
  %89 = load i32, i32* %9, align 4, !tbaa !20283
  br label %104

90:                                               ; preds = %87
  %91 = bitcast [2 x i32]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %91) #34
  %92 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 1
  %93 = getelementptr inbounds [2 x i32], [2 x i32]* %11, i64 0, i64 0
  %94 = load i32, i32* %7, align 4, !tbaa !20283
  %95 = load i32, i32* %8, align 4, !tbaa !20283
  %96 = call { i32, i32 } asm "mul $2", "={ax},={dx},r,{ax},~{cc},~{dirflag},~{fpsr},~{flags}"(i32 %94, i32 %95) #52, !srcloc !23049
  %97 = extractvalue { i32, i32 } %96, 0
  %98 = extractvalue { i32, i32 } %96, 1
  store i32 %97, i32* %93, align 4, !tbaa !20283
  store i32 %98, i32* %92, align 4, !tbaa !20283
  %99 = call fastcc i32 @_ZN6BigintIjjE6divideEPjPKjij(i32* nonnull %93, i32* nonnull %93, i32 2, i32 1000)
  %100 = load i32, i32* %92, align 4, !tbaa !20283
  %101 = icmp eq i32 %100, 0
  %102 = load i32, i32* %93, align 4
  %103 = select i1 %101, i32 %102, i32 -1
  store i32 %103, i32* %9, align 4, !tbaa !20283
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %91) #34
  br label %104

104:                                              ; preds = %90, %88
  %105 = phi i32 [ %89, %88 ], [ %103, %90 ]
  %106 = load i32, i32* %7, align 4, !tbaa !20283
  %107 = icmp eq i32 %105, 0
  %108 = select i1 %107, i32 1, i32 %105
  %109 = bitcast i64* %6 to [2 x i32]*
  %110 = icmp ne i32 %106, 0
  br i1 %110, label %111, label %117

111:                                              ; preds = %104
  %112 = add i32 %106, -1
  %113 = udiv i32 %112, 1000
  %114 = add nuw nsw i32 %113, 1
  %115 = icmp ugt i32 %108, %113
  %116 = select i1 %115, i32 %108, i32 %114
  br label %117

117:                                              ; preds = %111, %104
  %118 = phi i32 [ %116, %111 ], [ %108, %104 ]
  %119 = udiv i32 -1, %118
  %120 = getelementptr inbounds %class.TokenBucketX, %class.TokenBucketX* %1, i64 0, i32 0, i32 1
  store i32 %119, i32* %120, align 4, !tbaa !23036
  %121 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %121) #34
  %122 = bitcast i64* %6 to i32*
  %123 = call { i32, i32 } asm "mul $2", "={ax},={dx},r,{ax},~{cc},~{dirflag},~{fpsr},~{flags}"(i32 %106, i32 %119) #52, !srcloc !23049
  %124 = extractvalue { i32, i32 } %123, 0
  %125 = extractvalue { i32, i32 } %123, 1
  %126 = getelementptr inbounds i32, i32* %122, i64 1
  store i32 %124, i32* %122, align 8, !tbaa !20283
  %127 = call { i32, i32 } asm "mul $2", "={ax},={dx},r,{ax},~{cc},~{dirflag},~{fpsr},~{flags}"(i32 0, i32 %119) #52, !srcloc !23049
  %128 = extractvalue { i32, i32 } %127, 0
  %129 = add i32 %128, %125
  store i32 %129, i32* %126, align 4, !tbaa !20283
  %130 = call fastcc i32 @_ZN6BigintIjjE6divideEPjPKjij(i32* nonnull %122, i32* nonnull %122, i32 2, i32 1000)
  %131 = getelementptr inbounds [2 x i32], [2 x i32]* %109, i64 0, i64 1
  %132 = load i32, i32* %131, align 4, !tbaa !20283
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %135, label %134

134:                                              ; preds = %117
  call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21.11204, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.22.11205, i64 0, i64 0), i32 230, i8* getelementptr inbounds ([162 x i8], [162 x i8]* @__PRETTY_FUNCTION__._ZN10TokenRateXI26TokenBucketJiffyParametersIjEE6assignEjj.11206, i64 0, i64 0)) #57
  unreachable

135:                                              ; preds = %117
  br i1 %110, label %136, label %143

136:                                              ; preds = %135
  %137 = load i32, i32* %122, align 8, !tbaa !20283
  %138 = icmp eq i32 %137, 0
  %139 = select i1 %138, i32 1, i32 %137
  %140 = udiv i32 -2, %139
  %141 = add nuw i32 %140, 1
  %142 = zext i32 %141 to i64
  br label %143

143:                                              ; preds = %136, %135
  %144 = phi i32 [ %139, %136 ], [ 0, %135 ]
  %145 = phi i64 [ %142, %136 ], [ -1, %135 ]
  %146 = getelementptr inbounds %class.TokenBucketX, %class.TokenBucketX* %1, i64 0, i32 0, i32 0
  store i32 %144, i32* %146, align 8
  %147 = getelementptr inbounds %class.TokenBucketX, %class.TokenBucketX* %1, i64 0, i32 0, i32 2
  store i64 %145, i64* %147, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %121) #34
  %148 = getelementptr inbounds %class.TokenBucketX, %class.TokenBucketX* %1, i64 0, i32 1, i32 1
  %149 = load i64, i64* %148, align 8, !tbaa !23041
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %_ZN4Args8completeEv.exit.thread, label %151

151:                                              ; preds = %143
  call void @__assert_fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.3171, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5.3172, i64 0, i64 0), i32 54, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @__PRETTY_FUNCTION__._ZN15FlowRateLimiter16configure_helperEP12TokenBucketXI26TokenBucketJiffyParametersIjEEP7ElementR6VectorI6StringLm16EEP12ErrorHandler, i64 0, i64 0)) #57
  unreachable

_ZN4Args8completeEv.exit.thread:                  ; preds = %143, %85, %.noexc
  %152 = phi i32 [ %86, %85 ], [ 0, %143 ], [ -1, %.noexc ]
  call void @_ZN4ArgsD2Ev(%class.Args* nonnull %10) #34
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %15) #34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #34
  ret i32 %152

.loopexit2:                                       ; preds = %46
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %153

.loopexit.split-lp:                               ; preds = %85, %32, %30, %29, %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %153

153:                                              ; preds = %.loopexit.split-lp, %.loopexit2
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %.loopexit2 ], [ %lpad.loopexit.split-lp, %.loopexit.split-lp ]
  call void @_ZN4ArgsD2Ev(%class.Args* nonnull %10) #34
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %15) #34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #34
  resume { i8*, i32 } %lpad.phi
}

define dso_local void @_ZN15FlowRateLimiter9push_flowEiP8FRLStateP11PacketBatch(%class.FlowRateLimiter* nocapture readonly %0, i32 %1, %struct.FRLState* nocapture %2, %class.PacketBatch* %3) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.timespec, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = getelementptr inbounds %struct.FRLState, %struct.FRLState* %2, i64 0, i32 0, i32 1
  %9 = bitcast %struct.timespec* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #34
  %10 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %5) #34
  %11 = getelementptr inbounds %struct.timespec, %struct.timespec* %5, i64 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !20557
  %13 = getelementptr inbounds %struct.timespec, %struct.timespec* %5, i64 0, i32 1
  %14 = load i64, i64* %13, align 8, !tbaa !20559
  %15 = shl i64 %12, 32
  %16 = ashr exact i64 %15, 32
  %17 = mul nsw i64 %16, 1000000000
  %18 = and i64 %14, 4294967295
  %19 = add nsw i64 %17, %18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #34
  %20 = sdiv i64 %19, 1000000
  %21 = getelementptr inbounds %struct.FRLState, %struct.FRLState* %2, i64 0, i32 0, i32 1, i32 1
  %22 = load i64, i64* %21, align 8, !tbaa !23041
  %23 = tail call i64 @llvm.usub.sat.i64(i64 %20, i64 %22) #34
  %24 = getelementptr inbounds %struct.FRLState, %struct.FRLState* %2, i64 0, i32 0, i32 0, i32 2
  %25 = load i64, i64* %24, align 8, !tbaa !23050
  %26 = icmp ult i64 %23, %25
  br i1 %26, label %29, label %27

27:                                               ; preds = %4
  %28 = getelementptr inbounds %class.TokenCounterX, %class.TokenCounterX* %8, i64 0, i32 0
  store i32 -1, i32* %28, align 8, !tbaa !23039
  br label %39

29:                                               ; preds = %4
  %30 = icmp ult i64 %22, %20
  br i1 %30, label %31, label %39

31:                                               ; preds = %29
  %32 = getelementptr inbounds %class.TokenCounterX, %class.TokenCounterX* %8, i64 0, i32 0
  %33 = load i32, i32* %32, align 8, !tbaa !23039
  %34 = getelementptr inbounds %struct.FRLState, %struct.FRLState* %2, i64 0, i32 0, i32 0, i32 0
  %35 = load i32, i32* %34, align 8, !tbaa !23038
  %36 = trunc i64 %23 to i32
  %37 = mul i32 %35, %36
  %38 = tail call i32 @llvm.uadd.sat.i32(i32 %33, i32 %37)
  store i32 %38, i32* %32, align 8, !tbaa !23039
  br label %39

39:                                               ; preds = %31, %29, %27
  store i64 %20, i64* %21, align 8, !tbaa !23041
  %40 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %3, i64 48, i32 0
  %41 = getelementptr inbounds i8, i8* %40, i64 24
  %42 = bitcast i8* %41 to i16*
  %43 = load i16, i16* %42, align 2, !tbaa !20287
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %39
  tail call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.259.16395, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6.13925, i64 0, i64 0), i32 439, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__._ZN11PacketBatch5countEv.13926, i64 0, i64 0)) #57
  unreachable

46:                                               ; preds = %39
  %47 = zext i16 %43 to i32
  %48 = getelementptr inbounds %struct.FRLState, %struct.FRLState* %2, i64 0, i32 0, i32 0, i32 1
  %49 = load i32, i32* %48, align 4, !tbaa !23036
  %50 = tail call { i32, i32 } asm "mul $2", "={ax},={dx},r,{ax},~{cc},~{dirflag},~{fpsr},~{flags}"(i32 %47, i32 %49) #52, !srcloc !23049
  %51 = extractvalue { i32, i32 } %50, 1
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %56, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.FRLState, %struct.FRLState* %2, i64 0, i32 0, i32 1, i32 0
  %55 = load i32, i32* %54, align 8, !tbaa !23039
  br label %78

56:                                               ; preds = %46
  %57 = extractvalue { i32, i32 } %50, 0
  %58 = getelementptr inbounds %struct.FRLState, %struct.FRLState* %2, i64 0, i32 0, i32 1, i32 0
  %59 = load i32, i32* %58, align 8, !tbaa !23039
  %60 = icmp ult i32 %59, %57
  br i1 %60, label %78, label %61

61:                                               ; preds = %56
  %62 = tail call i32 @llvm.usub.sat.i32(i32 %59, i32 %57) #34
  store i32 %62, i32* %58, align 8, !tbaa !23039
  %63 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i64 1
  %64 = load i32, i32* %63, align 4, !tbaa !20283
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %61
  tail call void @__assert_fail(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.56.14329, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.96.15137, i64 0, i64 0), i32 568, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__PRETTY_FUNCTION__._ZNK7Element4portEbi.14331, i64 0, i64 0)) #57
  unreachable

67:                                               ; preds = %61
  %68 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 1
  %69 = load %"class.Element::Port"*, %"class.Element::Port"** %68, align 8, !tbaa !20284
  %70 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %69, i64 0, i32 0
  %71 = load %class.Element*, %class.Element** %70, align 8, !tbaa !20278
  %72 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %69, i64 0, i32 1
  %73 = load i32, i32* %72, align 8, !tbaa !20280
  %74 = bitcast %class.Element* %71 to void (%class.Element*, i32, %class.PacketBatch*)***
  %75 = load void (%class.Element*, i32, %class.PacketBatch*)**, void (%class.Element*, i32, %class.PacketBatch*)*** %74, align 8, !tbaa !20285
  %76 = getelementptr inbounds void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %75, i64 5
  %77 = load void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %76, align 8
  tail call void %77(%class.Element* %71, i32 %73, %class.PacketBatch* nonnull %3)
  ret void

78:                                               ; preds = %56, %53
  %79 = phi i32 [ %55, %53 ], [ %59, %56 ]
  %80 = getelementptr inbounds %struct.FRLState, %struct.FRLState* %2, i64 0, i32 0, i32 1, i32 0
  %81 = udiv i32 %79, %49
  tail call void (i8*, ...) @click_chatter(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.3180, i64 0, i64 0), i32 %47, i32 %81)
  %82 = icmp ugt i32 %49, %79
  %83 = bitcast %class.PacketBatch* %3 to %class.Packet*
  br i1 %82, label %84, label %99

84:                                               ; preds = %78
  %85 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %3, i64 136
  %86 = bitcast %class.PacketBatch* %85 to %class.Packet**
  br label %87

87:                                               ; preds = %96, %84
  %88 = phi %class.Packet* [ %90, %96 ], [ %83, %84 ]
  %89 = phi %class.Packet** [ %98, %96 ], [ %86, %84 ]
  %90 = load %class.Packet*, %class.Packet** %89, align 8, !tbaa !20284
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #34
  %91 = getelementptr inbounds %class.Packet, %class.Packet* %88, i64 0, i32 0, i32 0
  call void asm sideeffect "lock ; decl $0 ; sete $1", "=*m,=*qm,*m,~{cc},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %91, i8* nonnull %7, i32* nonnull %91) #34, !srcloc !23051
  %92 = load i8, i8* %7, align 1, !tbaa !20287
  %93 = icmp eq i8 %92, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #34
  br i1 %93, label %96, label %94

94:                                               ; preds = %87
  %95 = bitcast %class.Packet* %88 to %class.WritablePacket*
  call void @_ZN14WritablePacket7recycleEPS_(%class.WritablePacket* nonnull %95)
  br label %96

96:                                               ; preds = %94, %87
  %97 = icmp eq %class.Packet* %90, null
  %98 = getelementptr inbounds %class.Packet, %class.Packet* %90, i64 0, i32 6, i32 6
  br i1 %97, label %.loopexit, label %87

99:                                               ; preds = %78
  %100 = icmp sgt i32 %81, 0
  br i1 %100, label %101, label %114

101:                                              ; preds = %99
  %102 = icmp eq i32 %81, 1
  br i1 %102, label %.loopexit12, label %103

103:                                              ; preds = %101
  %104 = add nsw i32 %81, -1
  br label %105

105:                                              ; preds = %112, %103
  %106 = phi %class.Packet* [ %109, %112 ], [ %83, %103 ]
  %107 = phi i32 [ %111, %112 ], [ 0, %103 ]
  %108 = getelementptr inbounds %class.Packet, %class.Packet* %106, i64 0, i32 6, i32 6
  %109 = load %class.Packet*, %class.Packet** %108, align 8, !tbaa !20284
  %110 = icmp eq %class.Packet* %109, null
  %111 = add nuw nsw i32 %107, 1
  br i1 %110, label %.loopexit12, label %112, !prof !20322, !misexpect !20323

112:                                              ; preds = %105
  %113 = icmp eq i32 %111, %104
  br i1 %113, label %.loopexit12, label %105

114:                                              ; preds = %99
  tail call void @__assert_fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.71.3391, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6.13925, i64 0, i64 0), i32 530, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN11PacketBatch5splitEiRPS_RKb.3392, i64 0, i64 0)) #57
  unreachable

.loopexit12:                                      ; preds = %112, %105, %101
  %115 = phi %class.Packet* [ %83, %101 ], [ null, %105 ], [ %109, %112 ]
  %116 = load i16, i16* %42, align 2, !tbaa !20287
  %117 = icmp eq i16 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %.loopexit12
  tail call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.259.16395, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6.13925, i64 0, i64 0), i32 439, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__._ZN11PacketBatch5countEv.13926, i64 0, i64 0)) #57
  unreachable

119:                                              ; preds = %.loopexit12
  %120 = getelementptr inbounds %class.Packet, %class.Packet* %115, i64 0, i32 6, i32 6
  %121 = bitcast %class.Packet** %120 to %class.PacketBatch**
  %122 = load %class.PacketBatch*, %class.PacketBatch** %121, align 8, !tbaa !20284
  store %class.Packet* null, %class.Packet** %120, align 8, !tbaa !20337
  %123 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %3, i64 144
  %124 = bitcast %class.PacketBatch* %123 to %class.Packet**
  %125 = bitcast %class.PacketBatch* %123 to i64*
  %126 = load i64, i64* %125, align 8, !tbaa !20284
  store %class.Packet* %115, %class.Packet** %124, align 8, !tbaa !20334
  %127 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %122, i64 144
  %128 = bitcast %class.PacketBatch* %127 to i64*
  store i64 %126, i64* %128, align 8, !tbaa !20334
  %129 = trunc i32 %81 to i16
  %130 = sub i16 %116, %129
  %131 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %122, i64 48, i32 0
  %132 = getelementptr inbounds i8, i8* %131, i64 24
  %133 = bitcast i8* %132 to i16*
  store i16 %130, i16* %133, align 2, !tbaa !20287
  store i16 %129, i16* %42, align 2, !tbaa !20287
  %134 = icmp eq %class.PacketBatch* %122, null
  br i1 %134, label %.loopexit11, label %135

135:                                              ; preds = %119
  %136 = bitcast %class.PacketBatch* %122 to %class.Packet*
  %137 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %122, i64 136
  %138 = bitcast %class.PacketBatch* %137 to %class.Packet**
  br label %139

139:                                              ; preds = %148, %135
  %140 = phi %class.Packet* [ %142, %148 ], [ %136, %135 ]
  %141 = phi %class.Packet** [ %150, %148 ], [ %138, %135 ]
  %142 = load %class.Packet*, %class.Packet** %141, align 8, !tbaa !20284
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #34
  %143 = getelementptr inbounds %class.Packet, %class.Packet* %140, i64 0, i32 0, i32 0
  call void asm sideeffect "lock ; decl $0 ; sete $1", "=*m,=*qm,*m,~{cc},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %143, i8* nonnull %6, i32* nonnull %143) #34, !srcloc !23051
  %144 = load i8, i8* %6, align 1, !tbaa !20287
  %145 = icmp eq i8 %144, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #34
  br i1 %145, label %148, label %146

146:                                              ; preds = %139
  %147 = bitcast %class.Packet* %140 to %class.WritablePacket*
  call void @_ZN14WritablePacket7recycleEPS_(%class.WritablePacket* nonnull %147)
  br label %148

148:                                              ; preds = %146, %139
  %149 = icmp eq %class.Packet* %142, null
  %150 = getelementptr inbounds %class.Packet, %class.Packet* %142, i64 0, i32 6, i32 6
  br i1 %149, label %.loopexit11, label %139

.loopexit11:                                      ; preds = %148, %119
  %151 = sub i32 %47, %81
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 2, i32 0
  %154 = load %"struct.per_thread<FlowRateLimiter::State>::A_t"*, %"struct.per_thread<FlowRateLimiter::State>::A_t"** %153, align 8, !tbaa !23044
  %155 = load i32, i32* @click_current_thread_id, align 4, !tbaa !20283
  %156 = and i32 %155, 65535
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds %"struct.per_thread<FlowRateLimiter::State>::A_t", %"struct.per_thread<FlowRateLimiter::State>::A_t"* %154, i64 %157, i32 0, i32 0
  %159 = load i64, i64* %158, align 8, !tbaa !23045
  %160 = add i64 %159, %152
  store i64 %160, i64* %158, align 8, !tbaa !23045
  %161 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i64 1
  %162 = load i32, i32* %161, align 4, !tbaa !20283
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %.loopexit11
  call void @__assert_fail(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.56.14329, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.96.15137, i64 0, i64 0), i32 568, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__PRETTY_FUNCTION__._ZNK7Element4portEbi.14331, i64 0, i64 0)) #57
  unreachable

165:                                              ; preds = %.loopexit11
  %166 = getelementptr inbounds %class.FlowRateLimiter, %class.FlowRateLimiter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 1
  %167 = load %"class.Element::Port"*, %"class.Element::Port"** %166, align 8, !tbaa !20284
  %168 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %167, i64 0, i32 0
  %169 = load %class.Element*, %class.Element** %168, align 8, !tbaa !20278
  %170 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %167, i64 0, i32 1
  %171 = load i32, i32* %170, align 8, !tbaa !20280
  %172 = bitcast %class.Element* %169 to void (%class.Element*, i32, %class.PacketBatch*)***
  %173 = load void (%class.Element*, i32, %class.PacketBatch*)**, void (%class.Element*, i32, %class.PacketBatch*)*** %172, align 8, !tbaa !20285
  %174 = getelementptr inbounds void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %173, i64 5
  %175 = load void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %174, align 8
  call void %175(%class.Element* %169, i32 %171, %class.PacketBatch* %3)
  %176 = load i32, i32* %48, align 4, !tbaa !23036
  %177 = call { i32, i32 } asm "mul $2", "={ax},={dx},r,{ax},~{cc},~{dirflag},~{fpsr},~{flags}"(i32 %81, i32 %176) #52, !srcloc !23049
  %178 = extractvalue { i32, i32 } %177, 0
  %179 = extractvalue { i32, i32 } %177, 1
  %180 = icmp eq i32 %179, 0
  %181 = select i1 %180, i32 %178, i32 -1
  %182 = load i32, i32* %80, align 8, !tbaa !23039
  %183 = call i32 @llvm.usub.sat.i32(i32 %182, i32 %181) #34
  store i32 %183, i32* %80, align 8, !tbaa !23039
  br label %.loopexit

.loopexit:                                        ; preds = %165, %96
  ret void
}

define dso_local i32 @_ZN15FlowRateLimiter13write_handlerERK6StringP7ElementPvP12ErrorHandler(%class.String* nocapture readnone dereferenceable(24) %0, %class.Element* nocapture readnone %1, i8* nocapture readnone %2, %class.ErrorHandler* nocapture readnone %3) local_unnamed_addr #4 align 2 {
  ret i32 -1
}

