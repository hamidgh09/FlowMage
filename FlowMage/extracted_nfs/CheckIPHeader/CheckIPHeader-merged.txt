/***  checkipheader.hh ***/

#ifndef CLICK_CHECKIPHEADER_HH
#define CLICK_CHECKIPHEADER_HH
#include <click/batchelement.hh>
#include <click/atomic.hh>
CLICK_DECLS
class Args;

/*
=c

CheckIPHeader([OFFSET, I<keywords> OFFSET, INTERFACES, BADSRC,
                       GOODDST, CHECKSUM, VERBOSE, DETAILS])

=s ip

checks IP header

=d

Input packets should have IP headers starting OFFSET bytes in. Default OFFSET
is zero. Checks that the packet's length is reasonable, and that the IP
version, header length, length, and checksum fields are valid. Checks that the
IP source address is a legal unicast address, or that the packet is destined
for one of this machine's addresses (see below). Shortens packets to the IP
length, if the IP length is shorter than the nominal packet length (due to
Ethernet padding, for example). Also sets the destination IP address
annotation to the actual destination IP address.

CheckIPHeader emits valid packets on output 0. Invalid packets are pushed out
on output 1, unless output 1 was unused; if so, drops invalid packets.

CheckIPHeader checks packets' source addresses for validity if one or more of
the INTERFACES, BADSRC, and GOODDST keyword arguments are supplied (RFC1812
5.3.7).

CheckIPHeader prints a message to the console the first time it encounters an
incorrect IP packet (but see VERBOSE below).

Keyword arguments are:

=over 5

=item CHECKSUM

Boolean. If true, then check each packet's checksum for validity; if false, do
not check the checksum. Default is true.

=item OFFSET

Unsigned integer. Byte position at which the IP header begins. Default is 0.

=item BADSRC

Space-separated list of IP addresses. CheckIPHeader will drop packets whose
source address is on this list (but see GOODDST below). Default is empty.

=item GOODDST

Space-separated list of IP addresses. CheckIPHeader exempts packets whose
destination address is on this list from BADSRC processing. Default is empty.

=item INTERFACES

Space-separated list of IP addresses with network prefixes, meant to represent
this router's interface addresses. This argument specifies both BADSRC and
GOODDST. Specifically, the argument "INTERFACES 18.26.4.9/24 18.32.9.44/28"
acts like a BADSRC of "18.26.4.255 18.32.9.47 0.0.0.0 255.255.255.255" -- the
set of broadcast addresses for this router -- and a GOODDST of "18.26.4.9
18.32.9.44". Default is not given.

=item VERBOSE

Boolean. If it is true, then a message will be printed for every erroneous
packet, rather than just the first. False by default.

=item DETAILS

Boolean. If it is true, then CheckIPHeader will maintain detailed counts of
how many packets were dropped for each possible reason, accessible through the
C<drop_details> handler. False by default.

=back

=n

CheckIPHeader supports an old configuration syntax:

CheckIPHeader([BADSRC2, OFFSET, I<keywords>])

The BADSRC2 argument behaves like the BADSRC keyword, except that if you use
this syntax, 0.0.0.0 and 255.255.255.255 considered bad addresses in addition
to those explicitly in the list. This syntax is deprecated and should not be
used in new configurations.

=h count read-only

Returns the number of correct packets CheckIPHeader has seen.

=h drops read-only

Returns the number of incorrect packets CheckIPHeader has seen.

=h drop_details read-only

Returns a text file showing how many erroneous packets CheckIPHeader has seen,
subdivided by error. Only available if the DETAILS keyword argument is true.

=a CheckIPHeader2, MarkIPHeader, SetIPChecksum, StripIPHeader,
CheckTCPHeader, CheckUDPHeader, CheckICMPHeader
*/

class CheckIPHeader : public SimpleElement<CheckIPHeader> {
    public:
        CheckIPHeader() CLICK_COLD;
        ~CheckIPHeader() CLICK_COLD;

        const char *class_name() const override { return "CheckIPHeader"; }
        const char *port_count() const override { return PORTS_1_1X2; }
        const char *processing() const override { return PROCESSING_A_AH; }
        const char *flags() const      { return Element::AGNOSTIC; }

        int configure(Vector<String> &, ErrorHandler *) CLICK_COLD;
        void add_handlers() CLICK_COLD;

        Packet *simple_action(Packet *p);

        struct OldBadSrcArg {
            static bool parse(const String &str, Vector<IPAddress> &result, Args &args);
        };

        struct InterfacesArg {
            static bool parse(
                const String &str, Vector<IPAddress> &result_bad_src,
                Vector<IPAddress> &result_good_dst, Args &args
            );
        };
    protected:

        enum Reason {
            MINISCULE_PACKET = 0,
            BAD_VERSION,
            BAD_HLEN,
            BAD_IP_LEN,
            BAD_CHECKSUM,
            BAD_SADDR,
            NREASONS
        };
    private:
        unsigned _offset;
        Vector<IPAddress> _bad_src;   // array of illegal IP src addresses

        bool _checksum;
    #if HAVE_FAST_CHECKSUM && FAST_CHECKSUM_ALIGNED
        bool _aligned;
    #endif
        bool _verbose;

        Vector<IPAddress> _good_dst;  // array of IP dst addrs for which _bad_src does not apply

        atomic_uint64_t _count;
        atomic_uint64_t _drops;
        atomic_uint64_t *_reason_drops;

        static const char * const reason_texts[NREASONS];

        enum { h_count, h_drops, h_drop_details };

        inline Reason valid(Packet *p);
        Packet *drop(Reason reason, Packet *p, bool batch);
        static String read_handler(Element *e, void *thunk) CLICK_COLD;

        friend class CheckIPHeader2;
};

CLICK_ENDDECLS
#endif


/***  checkipheader.cc ***/

/*
 * checkipheader.{cc,hh} -- element checks IP header for correctness
 * (checksums, lengths, source addresses)
 * Robert Morris, Eddie Kohler
 *
 * Computational batching support and counter & handler updates
 * by Georgios Katsikas
 *
 * Copyright (c) 1999-2000 Massachusetts Institute of Technology
 * Copyright (c) 2003 International Computer Science Institute
 * Copyright (c) 2020 UBITECH and KTH Royal Institute of Technology
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, subject to the conditions
 * listed in the Click LICENSE file. These conditions include: you must
 * preserve this copyright notice, and you cannot mention the copyright
 * holders in advertising related to the Software without their permission.
 * The Software is provided WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED. This
 * notice is a summary of the Click LICENSE file; the license in that file is
 * legally binding.
 */

#include <click/config.h>
#include "checkipheader.hh"
#include <clicknet/ip.h>
#include <click/glue.hh>
#include <click/args.hh>
#include <click/straccum.hh>
#include <click/error.hh>
#include <click/standard/alignmentinfo.hh>

CLICK_DECLS

const char * const CheckIPHeader::reason_texts[NREASONS] = {
    "tiny packet", "bad IPv4 version", "bad IPv4 header length",
    "bad IPv4 length", "bad IPv4 checksum", "bad source address"
};

#define IPADDR_LIST_INTERFACES ((void *)0)
#define IPADDR_LIST_BADSRC     ((void *)1)
#define IPADDR_LIST_BADSRC_OLD ((void *)2)

bool
CheckIPHeader::OldBadSrcArg::parse(const String &str, Vector<IPAddress> &result, Args &args)
{
    if (IPAddressArg().parse(str, result, args)) {
        result.push_back(IPAddress(0));
        result.push_back(IPAddress(0xFFFFFFFFU));
        return true;
    } else {
        return false;
    }
}

bool
CheckIPHeader::InterfacesArg::parse(const String &str, Vector<IPAddress> &result_bad_src,
    Vector<IPAddress> &result_good_dst, Args &args)
{
    String arg(str);
    IPAddress ip, mask;
    int nwords = 0;
    while (String word = cp_shift_spacevec(arg)) {
        ++nwords;
        if (IPPrefixArg(true).parse(word, ip, mask, args)) {
            result_bad_src.push_back((ip & mask) | ~mask);
            result_good_dst.push_back(ip);
        } else {
            return false;
        }
    }

    if (nwords == result_bad_src.size()) {
        result_bad_src.push_back(IPAddress(0));
        result_bad_src.push_back(IPAddress(0xFFFFFFFFU));
        return true;
    }

    args.error("out of memory");
    return false;
}

CheckIPHeader::CheckIPHeader() : _checksum(true), _reason_drops(0)
{
    _count = 0;
    _drops = 0;
}

CheckIPHeader::~CheckIPHeader()
{
    if (_reason_drops) {
        delete _reason_drops;
    }
}

int
CheckIPHeader::configure(Vector<String> &conf, ErrorHandler *errh)
{
    _offset = 0;
    bool verbose = false;
    bool details = false;

    if (Args(this, errh).bind(conf)
        .read("INTERFACES", InterfacesArg(), _bad_src, _good_dst)
        .read("BADSRC", _bad_src)
        .read("GOODDST", _good_dst)
        .read_or_set("OFFSET", _offset, 0)
        .read_or_set("VERBOSE", verbose, 0)
        .read("DETAILS", details)
        .read_or_set("CHECKSUM", _checksum, 0)
        .consume() < 0)
        return -1;

    if (Args(conf, this, errh)
        .read("BADSRC", OldBadSrcArg(), _bad_src)
        .read("OFFSET", _offset)
        .complete() < 0)
        return -1;

    _verbose = verbose;
    if (details) {
        _reason_drops = new atomic_uint64_t[NREASONS];
        memset(_reason_drops, 0, NREASONS * sizeof(atomic_uint64_t));
    }

#if HAVE_FAST_CHECKSUM && FAST_CHECKSUM_ALIGNED
    // check alignment
    if (_checksum) {
        int ans, c, o;
        ans = AlignmentInfo::query(this, 0, c, o);
        o = (o + 4 - (_offset % 4)) % 4;
        _aligned = (ans && c == 4 && o == 0);
        if (!_aligned)
            errh->warning("IP header unaligned, cannot use fast IP checksum");
        if (!ans)
            errh->message("(Try passing the configuration through `click-align'.)");
    }
#endif

    return 0;
}

Packet *
CheckIPHeader::drop(Reason reason, Packet *p, bool batch)
{
    if (_drops == 0 || _verbose) {
        click_chatter("%s: IP header check failed: %s", name().c_str(), reason_texts[reason]);
    }
    _drops++;

    if (_reason_drops) {
        _reason_drops[reason]++;
    }

    if (noutputs() == 2) {
        output(1).push(p);
    } else {
        p->kill();
    }

    return 0;
}

inline CheckIPHeader::Reason CheckIPHeader::valid(Packet* p) {
    unsigned plen = p->length() - _offset;

    // cast to int so very large plen is interpreted as negative
    if ((int)plen < (int)sizeof(click_ip))
        return MINISCULE_PACKET;

    const click_ip *ip = reinterpret_cast<const click_ip *>(p->data() + _offset);
    if (ip->ip_v != 4)
        return BAD_VERSION;

    unsigned hlen = ip->ip_hl << 2;
    if (hlen < sizeof(click_ip))
        return BAD_HLEN;

    unsigned len = ntohs(ip->ip_len);
    if (len > plen || len < hlen)
        return BAD_IP_LEN;

    if (_checksum) {
        int val;
    #if HAVE_FAST_CHECKSUM && FAST_CHECKSUM_ALIGNED
        if (_aligned)
            val = ip_fast_csum((unsigned char *)ip, ip->ip_hl);
        else
            val = click_in_cksum((const unsigned char *)ip, hlen);
    #elif HAVE_FAST_CHECKSUM
        val = ip_fast_csum((unsigned char *)ip, ip->ip_hl);
    #else
        val = click_in_cksum((const unsigned char *)ip, hlen);
    #endif
        if (val != 0)
            return BAD_CHECKSUM;
    }

    /*
    * RFC1812 5.3.7 and 4.2.2.11: discard illegal source addresses.
    * Configuration string should have listed all subnet
    * broadcast addresses known to this router.
    */
    if (find(_bad_src.begin(), _bad_src.end(), IPAddress(ip->ip_src)) < _bad_src.end() &&
        find(_good_dst.begin(), _good_dst.end(), IPAddress(ip->ip_dst)) == _good_dst.end())
        return BAD_SADDR;

    /*
    * RFC1812 4.2.3.1: discard illegal destinations.
    * We now do this in the IP routing table.
    */
    p->set_ip_header(ip, hlen);

    // shorten packet according to IP length field -- 7/28/2000
    if (plen > len)
        p->take(plen - len);

    // set destination IP address annotation if it doesn't exist already --
    // 9/26/2001
    // always set destination IP address annotation; linuxmodule problem
    // reported by Parveen Kumar Patel at Utah -- 4/3/2002
    p->set_dst_ip_anno(ip->ip_dst);

    _count++;

    return NREASONS;
}

Packet *
CheckIPHeader::simple_action(Packet *p)
{
    Reason r;
    if ((r = valid(p)) == NREASONS) {
        return p;
    } else {
        drop(r, p, false);
        return NULL;
    }
}

String
CheckIPHeader::read_handler(Element *e, void *thunk)
{
    CheckIPHeader *c = reinterpret_cast<CheckIPHeader *>(e);

    switch (reinterpret_cast<uintptr_t>(thunk)) {
        case h_count: {
            return String(c->_count);
        }
        case h_drops: {
            return String(c->_drops);
        }
        case h_drop_details: {
            StringAccum sa;
            for (unsigned i = 0; i < NREASONS; i++) {
                sa.snprintf(15, "%15" PRIu64, c->_reason_drops[i].value());
                sa << " packets due to: ";
                sa.snprintf(24, "%24s", reason_texts[i]);
                sa << "\n";
            }
            return sa.take_string();
        }
        default: {
            return String();
        }
    }
}

void
CheckIPHeader::add_handlers()
{
    add_read_handler("count", read_handler, h_count);
    add_read_handler("drops", read_handler, h_drops);
    if (_reason_drops)
        add_read_handler("drop_details", read_handler, h_drop_details);
}

CLICK_ENDDECLS
EXPORT_ELEMENT(CheckIPHeader)
ELEMENT_MT_SAFE(CheckIPHeader)


