/***  HashSwitch_llvm.txt ***/

define dso_local void @_ZN10HashSwitchC2Ev(%class.HashSwitch* %0) unnamed_addr #2 align 2 {
  %2 = getelementptr %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 0
  %3 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 2
  store i8 0, i8* %4, align 4, !tbaa !20277
  %5 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 5, i64 0
  %6 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %5, i64 0, i32 0
  store %class.Element* null, %class.Element** %6, align 8, !tbaa !20278
  %7 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 5, i64 0, i32 1
  store i32 -2, i32* %7, align 8, !tbaa !20280
  %8 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 5, i64 1, i32 0
  store %class.Element* null, %class.Element** %8, align 8, !tbaa !20278
  %9 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 5, i64 1, i32 1
  store i32 -2, i32* %9, align 8, !tbaa !20280
  %10 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 5, i64 2, i32 0
  store %class.Element* null, %class.Element** %10, align 8, !tbaa !20278
  %11 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 5, i64 2, i32 1
  store i32 -2, i32* %11, align 8, !tbaa !20280
  %12 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 5, i64 3, i32 0
  store %class.Element* null, %class.Element** %12, align 8, !tbaa !20278
  %13 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 5, i64 3, i32 1
  store i32 -2, i32* %13, align 8, !tbaa !20280
  %14 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 7
  store %class.Router* null, %class.Router** %14, align 8, !tbaa !20281
  %15 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 8
  store i32 -1, i32* %15, align 8, !tbaa !20282
  %16 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 10
  %17 = bitcast %class.Vector* %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(17) %17, i8 0, i64 17, i1 false) #34
  %18 = load i32, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %20 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 4, i64 1
  store %"class.Element::Port"* %5, %"class.Element::Port"** %20, align 8, !tbaa !20284
  %21 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 4, i64 0
  store %"class.Element::Port"* %5, %"class.Element::Port"** %21, align 8, !tbaa !20284
  %22 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 6, i64 1
  store i32 0, i32* %22, align 4, !tbaa !20283
  %23 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 6, i64 0
  store i32 0, i32* %23, align 8, !tbaa !20283
  store i32 1, i32* %3, align 8, !tbaa !20267
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [39 x i8*] }, { [39 x i8*] }* @_ZTV10HashSwitch, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !20285
  %24 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 1
  store i32 -1, i32* %24, align 4, !tbaa !25472
  ret void
}

define internal void @_ZN10HashSwitchD0Ev(%class.HashSwitch* %0) unnamed_addr #7 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %2 = getelementptr %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [38 x i8*] }, { [38 x i8*] }* @_ZTV7Element, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !20285
  %3 = load i32, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %4 = add nsw i32 %3, -1
  store i32 %4, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %5 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 4, i64 0
  %6 = load %"class.Element::Port"*, %"class.Element::Port"** %5, align 8, !tbaa !20284
  %7 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 5, i64 0
  %8 = icmp uge %"class.Element::Port"* %6, %7
  %9 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 6
  %10 = bitcast [2 x i32]* %9 to %"class.Element::Port"*
  %11 = icmp ule %"class.Element::Port"* %6, %10
  %12 = and i1 %11, %8
  %13 = icmp eq %"class.Element::Port"* %6, null
  %14 = or i1 %13, %12
  br i1 %14, label %17, label %15

15:                                               ; preds = %1
  %16 = bitcast %"class.Element::Port"* %6 to i8*
  tail call void @_ZdaPv(i8* %16) #55
  br label %17

17:                                               ; preds = %15, %1
  %18 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 4, i64 1
  %19 = load %"class.Element::Port"*, %"class.Element::Port"** %18, align 8, !tbaa !20284
  %20 = icmp uge %"class.Element::Port"* %19, %7
  %21 = icmp ule %"class.Element::Port"* %19, %10
  %22 = and i1 %21, %20
  %23 = icmp eq %"class.Element::Port"* %19, null
  %24 = or i1 %23, %22
  br i1 %24, label %27, label %25

25:                                               ; preds = %17
  %26 = bitcast %"class.Element::Port"* %19 to i8*
  tail call void @_ZdaPv(i8* %26) #55
  br label %27

27:                                               ; preds = %25, %17
  %28 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 10
  %29 = bitcast %class.Vector* %28 to i8**
  %30 = load i8*, i8** %29, align 8, !tbaa !20288
  %31 = icmp eq i8* %30, null
  br i1 %31, label %_ZN12BatchElementD2Ev.exit, label %32

32:                                               ; preds = %27
  tail call void @_ZdaPv(i8* nonnull %30) #55
  br label %_ZN12BatchElementD2Ev.exit

_ZN12BatchElementD2Ev.exit:                       ; preds = %32, %27
  ret void
}

define dso_local void @_ZN10HashSwitch4pushEiP6Packet(%class.HashSwitch* nocapture readonly %0, i32 %1, %class.Packet* %2) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.Packet, %class.Packet* %2, i64 0, i32 3
  %5 = load i8*, i8** %4, align 8, !tbaa !20399
  %6 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4, !tbaa !25472
  %8 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8, !tbaa !25474
  %10 = getelementptr inbounds %class.Packet, %class.Packet* %2, i64 0, i32 4
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !20396
  %13 = ptrtoint i8* %5 to i64
  %14 = sub i64 %12, %13
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %9, %7
  %17 = icmp sgt i32 %16, %15
  br i1 %17, label %209, label %18

18:                                               ; preds = %3
  %19 = icmp sgt i32 %9, 0
  br i1 %19, label %20, label %.loopexit

20:                                               ; preds = %18
  %21 = sext i32 %7 to i64
  %22 = sext i32 %16 to i64
  %23 = sub nsw i64 %22, %21
  %24 = icmp ult i64 %23, 32
  br i1 %24, label %25, label %28

25:                                               ; preds = %.loopexit6, %20
  %26 = phi i64 [ %21, %20 ], [ %30, %.loopexit6 ]
  %27 = phi i32 [ 0, %20 ], [ %188, %.loopexit6 ]
  br label %193

28:                                               ; preds = %20
  %29 = and i64 %23, -32
  %30 = add nsw i64 %29, %21
  %31 = add nsw i64 %29, -32
  %32 = lshr exact i64 %31, 5
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 3
  %35 = icmp ult i64 %31, 96
  br i1 %35, label %.loopexit7, label %36

36:                                               ; preds = %28
  %37 = sub nsw i64 %33, %34
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi i64 [ 0, %36 ], [ %132, %38 ]
  %40 = phi <8 x i32> [ zeroinitializer, %36 ], [ %128, %38 ]
  %41 = phi <8 x i32> [ zeroinitializer, %36 ], [ %129, %38 ]
  %42 = phi <8 x i32> [ zeroinitializer, %36 ], [ %130, %38 ]
  %43 = phi <8 x i32> [ zeroinitializer, %36 ], [ %131, %38 ]
  %44 = phi i64 [ %37, %36 ], [ %133, %38 ]
  %45 = add i64 %39, %21
  %46 = getelementptr inbounds i8, i8* %5, i64 %45
  %47 = bitcast i8* %46 to <8 x i8>*
  %48 = load <8 x i8>, <8 x i8>* %47, align 1, !tbaa !20287
  %49 = getelementptr inbounds i8, i8* %46, i64 8
  %50 = bitcast i8* %49 to <8 x i8>*
  %51 = load <8 x i8>, <8 x i8>* %50, align 1, !tbaa !20287
  %52 = getelementptr inbounds i8, i8* %46, i64 16
  %53 = bitcast i8* %52 to <8 x i8>*
  %54 = load <8 x i8>, <8 x i8>* %53, align 1, !tbaa !20287
  %55 = getelementptr inbounds i8, i8* %46, i64 24
  %56 = bitcast i8* %55 to <8 x i8>*
  %57 = load <8 x i8>, <8 x i8>* %56, align 1, !tbaa !20287
  %58 = zext <8 x i8> %48 to <8 x i32>
  %59 = zext <8 x i8> %51 to <8 x i32>
  %60 = zext <8 x i8> %54 to <8 x i32>
  %61 = zext <8 x i8> %57 to <8 x i32>
  %62 = add <8 x i32> %40, %58
  %63 = add <8 x i32> %41, %59
  %64 = add <8 x i32> %42, %60
  %65 = add <8 x i32> %43, %61
  %66 = or i64 %39, 32
  %67 = add i64 %66, %21
  %68 = getelementptr inbounds i8, i8* %5, i64 %67
  %69 = bitcast i8* %68 to <8 x i8>*
  %70 = load <8 x i8>, <8 x i8>* %69, align 1, !tbaa !20287
  %71 = getelementptr inbounds i8, i8* %68, i64 8
  %72 = bitcast i8* %71 to <8 x i8>*
  %73 = load <8 x i8>, <8 x i8>* %72, align 1, !tbaa !20287
  %74 = getelementptr inbounds i8, i8* %68, i64 16
  %75 = bitcast i8* %74 to <8 x i8>*
  %76 = load <8 x i8>, <8 x i8>* %75, align 1, !tbaa !20287
  %77 = getelementptr inbounds i8, i8* %68, i64 24
  %78 = bitcast i8* %77 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1, !tbaa !20287
  %80 = zext <8 x i8> %70 to <8 x i32>
  %81 = zext <8 x i8> %73 to <8 x i32>
  %82 = zext <8 x i8> %76 to <8 x i32>
  %83 = zext <8 x i8> %79 to <8 x i32>
  %84 = add <8 x i32> %62, %80
  %85 = add <8 x i32> %63, %81
  %86 = add <8 x i32> %64, %82
  %87 = add <8 x i32> %65, %83
  %88 = or i64 %39, 64
  %89 = add i64 %88, %21
  %90 = getelementptr inbounds i8, i8* %5, i64 %89
  %91 = bitcast i8* %90 to <8 x i8>*
  %92 = load <8 x i8>, <8 x i8>* %91, align 1, !tbaa !20287
  %93 = getelementptr inbounds i8, i8* %90, i64 8
  %94 = bitcast i8* %93 to <8 x i8>*
  %95 = load <8 x i8>, <8 x i8>* %94, align 1, !tbaa !20287
  %96 = getelementptr inbounds i8, i8* %90, i64 16
  %97 = bitcast i8* %96 to <8 x i8>*
  %98 = load <8 x i8>, <8 x i8>* %97, align 1, !tbaa !20287
  %99 = getelementptr inbounds i8, i8* %90, i64 24
  %100 = bitcast i8* %99 to <8 x i8>*
  %101 = load <8 x i8>, <8 x i8>* %100, align 1, !tbaa !20287
  %102 = zext <8 x i8> %92 to <8 x i32>
  %103 = zext <8 x i8> %95 to <8 x i32>
  %104 = zext <8 x i8> %98 to <8 x i32>
  %105 = zext <8 x i8> %101 to <8 x i32>
  %106 = add <8 x i32> %84, %102
  %107 = add <8 x i32> %85, %103
  %108 = add <8 x i32> %86, %104
  %109 = add <8 x i32> %87, %105
  %110 = or i64 %39, 96
  %111 = add i64 %110, %21
  %112 = getelementptr inbounds i8, i8* %5, i64 %111
  %113 = bitcast i8* %112 to <8 x i8>*
  %114 = load <8 x i8>, <8 x i8>* %113, align 1, !tbaa !20287
  %115 = getelementptr inbounds i8, i8* %112, i64 8
  %116 = bitcast i8* %115 to <8 x i8>*
  %117 = load <8 x i8>, <8 x i8>* %116, align 1, !tbaa !20287
  %118 = getelementptr inbounds i8, i8* %112, i64 16
  %119 = bitcast i8* %118 to <8 x i8>*
  %120 = load <8 x i8>, <8 x i8>* %119, align 1, !tbaa !20287
  %121 = getelementptr inbounds i8, i8* %112, i64 24
  %122 = bitcast i8* %121 to <8 x i8>*
  %123 = load <8 x i8>, <8 x i8>* %122, align 1, !tbaa !20287
  %124 = zext <8 x i8> %114 to <8 x i32>
  %125 = zext <8 x i8> %117 to <8 x i32>
  %126 = zext <8 x i8> %120 to <8 x i32>
  %127 = zext <8 x i8> %123 to <8 x i32>
  %128 = add <8 x i32> %106, %124
  %129 = add <8 x i32> %107, %125
  %130 = add <8 x i32> %108, %126
  %131 = add <8 x i32> %109, %127
  %132 = add i64 %39, 128
  %133 = add i64 %44, -4
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %.loopexit7, label %38, !llvm.loop !25475

.loopexit7:                                       ; preds = %38, %28
  %135 = phi <8 x i32> [ undef, %28 ], [ %128, %38 ]
  %136 = phi <8 x i32> [ undef, %28 ], [ %129, %38 ]
  %137 = phi <8 x i32> [ undef, %28 ], [ %130, %38 ]
  %138 = phi <8 x i32> [ undef, %28 ], [ %131, %38 ]
  %139 = phi i64 [ 0, %28 ], [ %132, %38 ]
  %140 = phi <8 x i32> [ zeroinitializer, %28 ], [ %128, %38 ]
  %141 = phi <8 x i32> [ zeroinitializer, %28 ], [ %129, %38 ]
  %142 = phi <8 x i32> [ zeroinitializer, %28 ], [ %130, %38 ]
  %143 = phi <8 x i32> [ zeroinitializer, %28 ], [ %131, %38 ]
  %144 = icmp eq i64 %34, 0
  br i1 %144, label %.loopexit6, label %.preheader

.preheader:                                       ; preds = %.preheader, %.loopexit7
  %145 = phi i64 [ %172, %.preheader ], [ %139, %.loopexit7 ]
  %146 = phi <8 x i32> [ %168, %.preheader ], [ %140, %.loopexit7 ]
  %147 = phi <8 x i32> [ %169, %.preheader ], [ %141, %.loopexit7 ]
  %148 = phi <8 x i32> [ %170, %.preheader ], [ %142, %.loopexit7 ]
  %149 = phi <8 x i32> [ %171, %.preheader ], [ %143, %.loopexit7 ]
  %150 = phi i64 [ %173, %.preheader ], [ %34, %.loopexit7 ]
  %151 = add i64 %145, %21
  %152 = getelementptr inbounds i8, i8* %5, i64 %151
  %153 = bitcast i8* %152 to <8 x i8>*
  %154 = load <8 x i8>, <8 x i8>* %153, align 1, !tbaa !20287
  %155 = getelementptr inbounds i8, i8* %152, i64 8
  %156 = bitcast i8* %155 to <8 x i8>*
  %157 = load <8 x i8>, <8 x i8>* %156, align 1, !tbaa !20287
  %158 = getelementptr inbounds i8, i8* %152, i64 16
  %159 = bitcast i8* %158 to <8 x i8>*
  %160 = load <8 x i8>, <8 x i8>* %159, align 1, !tbaa !20287
  %161 = getelementptr inbounds i8, i8* %152, i64 24
  %162 = bitcast i8* %161 to <8 x i8>*
  %163 = load <8 x i8>, <8 x i8>* %162, align 1, !tbaa !20287
  %164 = zext <8 x i8> %154 to <8 x i32>
  %165 = zext <8 x i8> %157 to <8 x i32>
  %166 = zext <8 x i8> %160 to <8 x i32>
  %167 = zext <8 x i8> %163 to <8 x i32>
  %168 = add <8 x i32> %146, %164
  %169 = add <8 x i32> %147, %165
  %170 = add <8 x i32> %148, %166
  %171 = add <8 x i32> %149, %167
  %172 = add nuw i64 %145, 32
  %173 = add nsw i64 %150, -1
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %.loopexit6, label %.preheader, !llvm.loop !25476

.loopexit6:                                       ; preds = %.preheader, %.loopexit7
  %175 = phi <8 x i32> [ %135, %.loopexit7 ], [ %168, %.preheader ]
  %176 = phi <8 x i32> [ %136, %.loopexit7 ], [ %169, %.preheader ]
  %177 = phi <8 x i32> [ %137, %.loopexit7 ], [ %170, %.preheader ]
  %178 = phi <8 x i32> [ %138, %.loopexit7 ], [ %171, %.preheader ]
  %179 = add <8 x i32> %176, %175
  %180 = add <8 x i32> %177, %179
  %181 = add <8 x i32> %178, %180
  %182 = shufflevector <8 x i32> %181, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %183 = add <8 x i32> %181, %182
  %184 = shufflevector <8 x i32> %183, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %185 = add <8 x i32> %183, %184
  %186 = shufflevector <8 x i32> %185, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %187 = add <8 x i32> %185, %186
  %188 = extractelement <8 x i32> %187, i32 0
  %189 = icmp eq i64 %23, %29
  br i1 %189, label %.loopexit, label %25

.loopexit:                                        ; preds = %193, %.loopexit6, %18
  %190 = phi i32 [ 0, %18 ], [ %188, %.loopexit6 ], [ %199, %193 ]
  %191 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 3
  %192 = load i32, i32* %191, align 4, !tbaa !25477
  switch i32 %192, label %207 [
    i32 8, label %202
    i32 4, label %202
    i32 2, label %202
  ]

193:                                              ; preds = %193, %25
  %194 = phi i64 [ %200, %193 ], [ %26, %25 ]
  %195 = phi i32 [ %199, %193 ], [ %27, %25 ]
  %196 = getelementptr inbounds i8, i8* %5, i64 %194
  %197 = load i8, i8* %196, align 1, !tbaa !20287
  %198 = zext i8 %197 to i32
  %199 = add nuw nsw i32 %195, %198
  %200 = add nsw i64 %194, 1
  %201 = icmp slt i64 %200, %22
  br i1 %201, label %193, label %.loopexit, !llvm.loop !25478

202:                                              ; preds = %.loopexit, %.loopexit, %.loopexit
  %203 = lshr i32 %190, 4
  %204 = xor i32 %203, %190
  %205 = add nsw i32 %192, -1
  %206 = and i32 %205, %204
  br label %209

207:                                              ; preds = %.loopexit
  %208 = srem i32 %190, %192
  br label %209

209:                                              ; preds = %207, %202, %3
  %210 = phi i32 [ 0, %3 ], [ %206, %202 ], [ %208, %207 ]
  %211 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 6, i64 1
  %212 = load i32, i32* %211, align 4, !tbaa !20283
  %213 = icmp ugt i32 %212, %210
  br i1 %213, label %215, label %214

214:                                              ; preds = %209
  tail call void @__assert_fail(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.56.14329, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.96.15137, i64 0, i64 0), i32 568, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__PRETTY_FUNCTION__._ZNK7Element4portEbi.14331, i64 0, i64 0)) #57
  unreachable

215:                                              ; preds = %209
  %216 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 4, i64 1
  %217 = load %"class.Element::Port"*, %"class.Element::Port"** %216, align 8, !tbaa !20284
  %218 = sext i32 %210 to i64
  %219 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %217, i64 %218, i32 0
  %220 = load %class.Element*, %class.Element** %219, align 8, !tbaa !20278
  %221 = icmp ne %class.Element* %220, null
  %222 = icmp ne %class.Packet* %2, null
  %223 = and i1 %222, %221
  br i1 %223, label %225, label %224

224:                                              ; preds = %215
  tail call void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.58.14334, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.96.15137, i64 0, i64 0), i32 767, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @__PRETTY_FUNCTION__._ZNK7Element4Port4pushEP6Packet.14335, i64 0, i64 0)) #57
  unreachable

225:                                              ; preds = %215
  %226 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %217, i64 %218, i32 1
  %227 = load i32, i32* %226, align 8, !tbaa !20280
  %228 = bitcast %class.Element* %220 to void (%class.Element*, i32, %class.Packet*)***
  %229 = load void (%class.Element*, i32, %class.Packet*)**, void (%class.Element*, i32, %class.Packet*)*** %228, align 8, !tbaa !20285
  %230 = getelementptr inbounds void (%class.Element*, i32, %class.Packet*)*, void (%class.Element*, i32, %class.Packet*)** %229, i64 2
  %231 = load void (%class.Element*, i32, %class.Packet*)*, void (%class.Element*, i32, %class.Packet*)** %230, align 8
  tail call void %231(%class.Element* nonnull %220, i32 %227, %class.Packet* nonnull %2)
  ret void
}

define dso_local void @_ZN10HashSwitch10push_batchEiP11PacketBatch(%class.HashSwitch* nocapture readonly %0, i32 %1, %class.PacketBatch* %2) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4, !tbaa !25477
  %6 = add nsw i32 %5, 1
  %7 = zext i32 %6 to i64
  %8 = alloca %class.PacketBatch*, i64 %7, align 16
  %9 = bitcast %class.PacketBatch** %8 to i8*
  %10 = sext i32 %6 to i64
  %11 = shl nsw i64 %10, 3
  call void @bzero(i8* nonnull %9, i64 %11) #34
  %12 = icmp eq %class.PacketBatch* %2, null
  br i1 %12, label %309, label %13

13:                                               ; preds = %3
  %14 = bitcast %class.PacketBatch* %2 to %class.Packet*
  %15 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %2, i64 136
  %16 = bitcast %class.PacketBatch* %15 to %class.Packet**
  %17 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 1
  %18 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 2
  br label %19

19:                                               ; preds = %288, %13
  %20 = phi i32 [ 0, %13 ], [ %289, %288 ]
  %21 = phi i32 [ -1, %13 ], [ %238, %288 ]
  %22 = phi %class.Packet* [ null, %13 ], [ %23, %288 ]
  %23 = phi %class.Packet* [ %14, %13 ], [ %25, %288 ]
  %24 = phi %class.Packet** [ %16, %13 ], [ %291, %288 ]
  %25 = load %class.Packet*, %class.Packet** %24, align 8, !tbaa !20284
  %26 = getelementptr inbounds %class.Packet, %class.Packet* %23, i64 0, i32 3
  %27 = load i8*, i8** %26, align 8, !tbaa !20399
  %28 = load i32, i32* %17, align 4, !tbaa !25472
  %29 = load i32, i32* %18, align 8, !tbaa !25474
  %30 = getelementptr inbounds %class.Packet, %class.Packet* %23, i64 0, i32 4
  %31 = bitcast i8** %30 to i64*
  %32 = load i64, i64* %31, align 8, !tbaa !20396
  %33 = ptrtoint i8* %27 to i64
  %34 = sub i64 %32, %33
  %35 = trunc i64 %34 to i32
  %36 = add nsw i32 %29, %28
  %37 = icmp sgt i32 %36, %35
  br i1 %37, label %38, label %40

38:                                               ; preds = %19
  %39 = load i32, i32* %4, align 4, !tbaa !25477
  br label %231

40:                                               ; preds = %19
  %41 = icmp sgt i32 %29, 0
  br i1 %41, label %42, label %.loopexit19

42:                                               ; preds = %40
  %43 = sext i32 %28 to i64
  %44 = sext i32 %36 to i64
  %45 = sub nsw i64 %44, %43
  %46 = icmp ult i64 %45, 32
  br i1 %46, label %47, label %50

47:                                               ; preds = %.loopexit20, %42
  %48 = phi i64 [ %43, %42 ], [ %52, %.loopexit20 ]
  %49 = phi i32 [ 0, %42 ], [ %210, %.loopexit20 ]
  br label %214

50:                                               ; preds = %42
  %51 = and i64 %45, -32
  %52 = add nsw i64 %51, %43
  %53 = add nsw i64 %51, -32
  %54 = lshr exact i64 %53, 5
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 3
  %57 = icmp ult i64 %53, 96
  br i1 %57, label %.loopexit21, label %58

58:                                               ; preds = %50
  %59 = sub nsw i64 %55, %56
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi i64 [ 0, %58 ], [ %154, %60 ]
  %62 = phi <8 x i32> [ zeroinitializer, %58 ], [ %150, %60 ]
  %63 = phi <8 x i32> [ zeroinitializer, %58 ], [ %151, %60 ]
  %64 = phi <8 x i32> [ zeroinitializer, %58 ], [ %152, %60 ]
  %65 = phi <8 x i32> [ zeroinitializer, %58 ], [ %153, %60 ]
  %66 = phi i64 [ %59, %58 ], [ %155, %60 ]
  %67 = add i64 %61, %43
  %68 = getelementptr inbounds i8, i8* %27, i64 %67
  %69 = bitcast i8* %68 to <8 x i8>*
  %70 = load <8 x i8>, <8 x i8>* %69, align 1, !tbaa !20287
  %71 = getelementptr inbounds i8, i8* %68, i64 8
  %72 = bitcast i8* %71 to <8 x i8>*
  %73 = load <8 x i8>, <8 x i8>* %72, align 1, !tbaa !20287
  %74 = getelementptr inbounds i8, i8* %68, i64 16
  %75 = bitcast i8* %74 to <8 x i8>*
  %76 = load <8 x i8>, <8 x i8>* %75, align 1, !tbaa !20287
  %77 = getelementptr inbounds i8, i8* %68, i64 24
  %78 = bitcast i8* %77 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1, !tbaa !20287
  %80 = zext <8 x i8> %70 to <8 x i32>
  %81 = zext <8 x i8> %73 to <8 x i32>
  %82 = zext <8 x i8> %76 to <8 x i32>
  %83 = zext <8 x i8> %79 to <8 x i32>
  %84 = add <8 x i32> %62, %80
  %85 = add <8 x i32> %63, %81
  %86 = add <8 x i32> %64, %82
  %87 = add <8 x i32> %65, %83
  %88 = or i64 %61, 32
  %89 = add i64 %88, %43
  %90 = getelementptr inbounds i8, i8* %27, i64 %89
  %91 = bitcast i8* %90 to <8 x i8>*
  %92 = load <8 x i8>, <8 x i8>* %91, align 1, !tbaa !20287
  %93 = getelementptr inbounds i8, i8* %90, i64 8
  %94 = bitcast i8* %93 to <8 x i8>*
  %95 = load <8 x i8>, <8 x i8>* %94, align 1, !tbaa !20287
  %96 = getelementptr inbounds i8, i8* %90, i64 16
  %97 = bitcast i8* %96 to <8 x i8>*
  %98 = load <8 x i8>, <8 x i8>* %97, align 1, !tbaa !20287
  %99 = getelementptr inbounds i8, i8* %90, i64 24
  %100 = bitcast i8* %99 to <8 x i8>*
  %101 = load <8 x i8>, <8 x i8>* %100, align 1, !tbaa !20287
  %102 = zext <8 x i8> %92 to <8 x i32>
  %103 = zext <8 x i8> %95 to <8 x i32>
  %104 = zext <8 x i8> %98 to <8 x i32>
  %105 = zext <8 x i8> %101 to <8 x i32>
  %106 = add <8 x i32> %84, %102
  %107 = add <8 x i32> %85, %103
  %108 = add <8 x i32> %86, %104
  %109 = add <8 x i32> %87, %105
  %110 = or i64 %61, 64
  %111 = add i64 %110, %43
  %112 = getelementptr inbounds i8, i8* %27, i64 %111
  %113 = bitcast i8* %112 to <8 x i8>*
  %114 = load <8 x i8>, <8 x i8>* %113, align 1, !tbaa !20287
  %115 = getelementptr inbounds i8, i8* %112, i64 8
  %116 = bitcast i8* %115 to <8 x i8>*
  %117 = load <8 x i8>, <8 x i8>* %116, align 1, !tbaa !20287
  %118 = getelementptr inbounds i8, i8* %112, i64 16
  %119 = bitcast i8* %118 to <8 x i8>*
  %120 = load <8 x i8>, <8 x i8>* %119, align 1, !tbaa !20287
  %121 = getelementptr inbounds i8, i8* %112, i64 24
  %122 = bitcast i8* %121 to <8 x i8>*
  %123 = load <8 x i8>, <8 x i8>* %122, align 1, !tbaa !20287
  %124 = zext <8 x i8> %114 to <8 x i32>
  %125 = zext <8 x i8> %117 to <8 x i32>
  %126 = zext <8 x i8> %120 to <8 x i32>
  %127 = zext <8 x i8> %123 to <8 x i32>
  %128 = add <8 x i32> %106, %124
  %129 = add <8 x i32> %107, %125
  %130 = add <8 x i32> %108, %126
  %131 = add <8 x i32> %109, %127
  %132 = or i64 %61, 96
  %133 = add i64 %132, %43
  %134 = getelementptr inbounds i8, i8* %27, i64 %133
  %135 = bitcast i8* %134 to <8 x i8>*
  %136 = load <8 x i8>, <8 x i8>* %135, align 1, !tbaa !20287
  %137 = getelementptr inbounds i8, i8* %134, i64 8
  %138 = bitcast i8* %137 to <8 x i8>*
  %139 = load <8 x i8>, <8 x i8>* %138, align 1, !tbaa !20287
  %140 = getelementptr inbounds i8, i8* %134, i64 16
  %141 = bitcast i8* %140 to <8 x i8>*
  %142 = load <8 x i8>, <8 x i8>* %141, align 1, !tbaa !20287
  %143 = getelementptr inbounds i8, i8* %134, i64 24
  %144 = bitcast i8* %143 to <8 x i8>*
  %145 = load <8 x i8>, <8 x i8>* %144, align 1, !tbaa !20287
  %146 = zext <8 x i8> %136 to <8 x i32>
  %147 = zext <8 x i8> %139 to <8 x i32>
  %148 = zext <8 x i8> %142 to <8 x i32>
  %149 = zext <8 x i8> %145 to <8 x i32>
  %150 = add <8 x i32> %128, %146
  %151 = add <8 x i32> %129, %147
  %152 = add <8 x i32> %130, %148
  %153 = add <8 x i32> %131, %149
  %154 = add i64 %61, 128
  %155 = add i64 %66, -4
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %.loopexit21, label %60, !llvm.loop !25479

.loopexit21:                                      ; preds = %60, %50
  %157 = phi <8 x i32> [ undef, %50 ], [ %150, %60 ]
  %158 = phi <8 x i32> [ undef, %50 ], [ %151, %60 ]
  %159 = phi <8 x i32> [ undef, %50 ], [ %152, %60 ]
  %160 = phi <8 x i32> [ undef, %50 ], [ %153, %60 ]
  %161 = phi i64 [ 0, %50 ], [ %154, %60 ]
  %162 = phi <8 x i32> [ zeroinitializer, %50 ], [ %150, %60 ]
  %163 = phi <8 x i32> [ zeroinitializer, %50 ], [ %151, %60 ]
  %164 = phi <8 x i32> [ zeroinitializer, %50 ], [ %152, %60 ]
  %165 = phi <8 x i32> [ zeroinitializer, %50 ], [ %153, %60 ]
  %166 = icmp eq i64 %56, 0
  br i1 %166, label %.loopexit20, label %.preheader

.preheader:                                       ; preds = %.preheader, %.loopexit21
  %167 = phi i64 [ %194, %.preheader ], [ %161, %.loopexit21 ]
  %168 = phi <8 x i32> [ %190, %.preheader ], [ %162, %.loopexit21 ]
  %169 = phi <8 x i32> [ %191, %.preheader ], [ %163, %.loopexit21 ]
  %170 = phi <8 x i32> [ %192, %.preheader ], [ %164, %.loopexit21 ]
  %171 = phi <8 x i32> [ %193, %.preheader ], [ %165, %.loopexit21 ]
  %172 = phi i64 [ %195, %.preheader ], [ %56, %.loopexit21 ]
  %173 = add i64 %167, %43
  %174 = getelementptr inbounds i8, i8* %27, i64 %173
  %175 = bitcast i8* %174 to <8 x i8>*
  %176 = load <8 x i8>, <8 x i8>* %175, align 1, !tbaa !20287
  %177 = getelementptr inbounds i8, i8* %174, i64 8
  %178 = bitcast i8* %177 to <8 x i8>*
  %179 = load <8 x i8>, <8 x i8>* %178, align 1, !tbaa !20287
  %180 = getelementptr inbounds i8, i8* %174, i64 16
  %181 = bitcast i8* %180 to <8 x i8>*
  %182 = load <8 x i8>, <8 x i8>* %181, align 1, !tbaa !20287
  %183 = getelementptr inbounds i8, i8* %174, i64 24
  %184 = bitcast i8* %183 to <8 x i8>*
  %185 = load <8 x i8>, <8 x i8>* %184, align 1, !tbaa !20287
  %186 = zext <8 x i8> %176 to <8 x i32>
  %187 = zext <8 x i8> %179 to <8 x i32>
  %188 = zext <8 x i8> %182 to <8 x i32>
  %189 = zext <8 x i8> %185 to <8 x i32>
  %190 = add <8 x i32> %168, %186
  %191 = add <8 x i32> %169, %187
  %192 = add <8 x i32> %170, %188
  %193 = add <8 x i32> %171, %189
  %194 = add nuw i64 %167, 32
  %195 = add nsw i64 %172, -1
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %.loopexit20, label %.preheader, !llvm.loop !25480

.loopexit20:                                      ; preds = %.preheader, %.loopexit21
  %197 = phi <8 x i32> [ %157, %.loopexit21 ], [ %190, %.preheader ]
  %198 = phi <8 x i32> [ %158, %.loopexit21 ], [ %191, %.preheader ]
  %199 = phi <8 x i32> [ %159, %.loopexit21 ], [ %192, %.preheader ]
  %200 = phi <8 x i32> [ %160, %.loopexit21 ], [ %193, %.preheader ]
  %201 = add <8 x i32> %198, %197
  %202 = add <8 x i32> %199, %201
  %203 = add <8 x i32> %200, %202
  %204 = shufflevector <8 x i32> %203, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %205 = add <8 x i32> %203, %204
  %206 = shufflevector <8 x i32> %205, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %207 = add <8 x i32> %205, %206
  %208 = shufflevector <8 x i32> %207, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %209 = add <8 x i32> %207, %208
  %210 = extractelement <8 x i32> %209, i32 0
  %211 = icmp eq i64 %45, %51
  br i1 %211, label %.loopexit19, label %47

.loopexit19:                                      ; preds = %214, %.loopexit20, %40
  %212 = phi i32 [ 0, %40 ], [ %210, %.loopexit20 ], [ %220, %214 ]
  %213 = load i32, i32* %4, align 4, !tbaa !25477
  switch i32 %213, label %228 [
    i32 8, label %223
    i32 4, label %223
    i32 2, label %223
  ]

214:                                              ; preds = %214, %47
  %215 = phi i64 [ %221, %214 ], [ %48, %47 ]
  %216 = phi i32 [ %220, %214 ], [ %49, %47 ]
  %217 = getelementptr inbounds i8, i8* %27, i64 %215
  %218 = load i8, i8* %217, align 1, !tbaa !20287
  %219 = zext i8 %218 to i32
  %220 = add nuw nsw i32 %216, %219
  %221 = add nsw i64 %215, 1
  %222 = icmp slt i64 %221, %44
  br i1 %222, label %214, label %.loopexit19, !llvm.loop !25481

223:                                              ; preds = %.loopexit19, %.loopexit19, %.loopexit19
  %224 = lshr i32 %212, 4
  %225 = xor i32 %224, %212
  %226 = add nsw i32 %213, -1
  %227 = and i32 %226, %225
  br label %231

228:                                              ; preds = %.loopexit19
  %229 = srem i32 %212, %213
  %230 = icmp slt i32 %229, 0
  br i1 %230, label %235, label %231

231:                                              ; preds = %228, %223, %38
  %232 = phi i32 [ %213, %228 ], [ %213, %223 ], [ %39, %38 ]
  %233 = phi i32 [ %229, %228 ], [ %227, %223 ], [ 0, %38 ]
  %234 = icmp sgt i32 %233, %232
  br i1 %234, label %235, label %237

235:                                              ; preds = %231, %228
  %236 = phi i32 [ %232, %231 ], [ %213, %228 ]
  br label %237

237:                                              ; preds = %235, %231
  %238 = phi i32 [ %236, %235 ], [ %233, %231 ]
  %239 = icmp eq i32 %238, %21
  br i1 %239, label %240, label %242

240:                                              ; preds = %237
  %241 = add nsw i32 %20, 1
  br label %288

242:                                              ; preds = %237
  %243 = icmp eq %class.Packet* %22, null
  br i1 %243, label %244, label %251

244:                                              ; preds = %242
  %245 = sext i32 %238 to i64
  %246 = getelementptr inbounds %class.PacketBatch*, %class.PacketBatch** %8, i64 %245
  %247 = bitcast %class.PacketBatch** %246 to %class.Packet**
  store %class.Packet* %23, %class.Packet** %247, align 8, !tbaa !20284
  %248 = getelementptr inbounds %class.Packet, %class.Packet* %23, i64 0, i32 6, i32 0, i32 0, i64 3
  %249 = bitcast i64* %248 to i16*
  store i16 1, i16* %249, align 2, !tbaa !20287
  %250 = getelementptr inbounds %class.Packet, %class.Packet* %23, i64 0, i32 6, i32 7
  store %class.Packet* %23, %class.Packet** %250, align 8, !tbaa !20334
  br label %288

251:                                              ; preds = %242
  %252 = sext i32 %21 to i64
  %253 = getelementptr inbounds %class.PacketBatch*, %class.PacketBatch** %8, i64 %252
  %254 = load %class.PacketBatch*, %class.PacketBatch** %253, align 8, !tbaa !20284
  %255 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %254, i64 144
  %256 = bitcast %class.PacketBatch* %255 to %class.Packet**
  store %class.Packet* %22, %class.Packet** %256, align 8, !tbaa !20334
  %257 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %254, i64 48, i32 0
  %258 = getelementptr inbounds i8, i8* %257, i64 24
  %259 = bitcast i8* %258 to i16*
  %260 = load i16, i16* %259, align 2, !tbaa !20287
  %261 = icmp eq i16 %260, 0
  br i1 %261, label %262, label %263

262:                                              ; preds = %251
  tail call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.259.16395, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6.13925, i64 0, i64 0), i32 439, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__._ZN11PacketBatch5countEv.13926, i64 0, i64 0)) #57
  unreachable

263:                                              ; preds = %251
  %264 = trunc i32 %20 to i16
  %265 = add i16 %260, %264
  store i16 %265, i16* %259, align 2, !tbaa !20287
  %266 = sext i32 %238 to i64
  %267 = getelementptr inbounds %class.PacketBatch*, %class.PacketBatch** %8, i64 %266
  %268 = load %class.PacketBatch*, %class.PacketBatch** %267, align 8, !tbaa !20284
  %269 = icmp eq %class.PacketBatch* %268, null
  br i1 %269, label %270, label %275

270:                                              ; preds = %263
  %271 = bitcast %class.PacketBatch** %267 to %class.Packet**
  store %class.Packet* %23, %class.Packet** %271, align 8, !tbaa !20284
  %272 = getelementptr inbounds %class.Packet, %class.Packet* %23, i64 0, i32 6, i32 0, i32 0, i64 3
  %273 = bitcast i64* %272 to i16*
  store i16 1, i16* %273, align 2, !tbaa !20287
  %274 = getelementptr inbounds %class.Packet, %class.Packet* %23, i64 0, i32 6, i32 7
  store %class.Packet* %23, %class.Packet** %274, align 8, !tbaa !20334
  br label %288

275:                                              ; preds = %263
  %276 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %268, i64 144
  %277 = bitcast %class.PacketBatch* %276 to %class.Packet**
  %278 = load %class.Packet*, %class.Packet** %277, align 8, !tbaa !20284
  %279 = getelementptr inbounds %class.Packet, %class.Packet* %278, i64 0, i32 6, i32 6
  store %class.Packet* %23, %class.Packet** %279, align 8, !tbaa !20337
  store %class.Packet* %23, %class.Packet** %277, align 8, !tbaa !20334
  %280 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %268, i64 48, i32 0
  %281 = getelementptr inbounds i8, i8* %280, i64 24
  %282 = bitcast i8* %281 to i16*
  %283 = load i16, i16* %282, align 2, !tbaa !20287
  %284 = icmp eq i16 %283, 0
  br i1 %284, label %285, label %286

285:                                              ; preds = %275
  tail call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.259.16395, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6.13925, i64 0, i64 0), i32 439, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__._ZN11PacketBatch5countEv.13926, i64 0, i64 0)) #57
  unreachable

286:                                              ; preds = %275
  %287 = add i16 %283, 1
  store i16 %287, i16* %282, align 2, !tbaa !20287
  br label %288

288:                                              ; preds = %286, %270, %244, %240
  %289 = phi i32 [ %241, %240 ], [ %20, %244 ], [ 0, %286 ], [ 0, %270 ]
  %290 = icmp eq %class.Packet* %25, null
  %291 = getelementptr inbounds %class.Packet, %class.Packet* %25, i64 0, i32 6, i32 6
  br i1 %290, label %292, label %19

292:                                              ; preds = %288
  %293 = icmp eq i32 %289, 0
  br i1 %293, label %309, label %294

294:                                              ; preds = %292
  %295 = sext i32 %238 to i64
  %296 = getelementptr inbounds %class.PacketBatch*, %class.PacketBatch** %8, i64 %295
  %297 = load %class.PacketBatch*, %class.PacketBatch** %296, align 8, !tbaa !20284
  %298 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %297, i64 144
  %299 = bitcast %class.PacketBatch* %298 to %class.Packet**
  store %class.Packet* %23, %class.Packet** %299, align 8, !tbaa !20334
  %300 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %297, i64 48, i32 0
  %301 = getelementptr inbounds i8, i8* %300, i64 24
  %302 = bitcast i8* %301 to i16*
  %303 = load i16, i16* %302, align 2, !tbaa !20287
  %304 = icmp eq i16 %303, 0
  br i1 %304, label %305, label %306

305:                                              ; preds = %294
  tail call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.259.16395, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6.13925, i64 0, i64 0), i32 439, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__._ZN11PacketBatch5countEv.13926, i64 0, i64 0)) #57
  unreachable

306:                                              ; preds = %294
  %307 = trunc i32 %289 to i16
  %308 = add i16 %303, %307
  store i16 %308, i16* %302, align 2, !tbaa !20287
  br label %309

309:                                              ; preds = %306, %292, %3
  %310 = load i32, i32* %4, align 4, !tbaa !25477
  %311 = icmp eq i32 %310, -1
  br i1 %311, label %.loopexit, label %312

312:                                              ; preds = %309
  %313 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 6, i64 1
  %314 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 4, i64 1
  br label %315

315:                                              ; preds = %339, %312
  %indvars.iv = phi i64 [ %indvars.iv.next, %339 ], [ 0, %312 ]
  %316 = getelementptr inbounds %class.PacketBatch*, %class.PacketBatch** %8, i64 %indvars.iv
  %317 = load %class.PacketBatch*, %class.PacketBatch** %316, align 8, !tbaa !20284
  %318 = icmp eq %class.PacketBatch* %317, null
  br i1 %318, label %339, label %319

319:                                              ; preds = %315
  %320 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %317, i64 144
  %321 = bitcast %class.PacketBatch* %320 to %class.Packet**
  %322 = load %class.Packet*, %class.Packet** %321, align 8, !tbaa !20284
  %323 = getelementptr inbounds %class.Packet, %class.Packet* %322, i64 0, i32 6, i32 6
  store %class.Packet* null, %class.Packet** %323, align 8, !tbaa !20337
  %324 = load i32, i32* %313, align 4, !tbaa !20283
  %325 = zext i32 %324 to i64
  %326 = icmp ult i64 %indvars.iv, %325
  br i1 %326, label %327, label %338

327:                                              ; preds = %319
  %328 = load %"class.Element::Port"*, %"class.Element::Port"** %314, align 8, !tbaa !20284
  %sext = shl i64 %indvars.iv, 32
  %329 = ashr exact i64 %sext, 32
  %330 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %328, i64 %329, i32 0
  %331 = load %class.Element*, %class.Element** %330, align 8, !tbaa !20278
  %332 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %328, i64 %329, i32 1
  %333 = load i32, i32* %332, align 8, !tbaa !20280
  %334 = bitcast %class.Element* %331 to void (%class.Element*, i32, %class.PacketBatch*)***
  %335 = load void (%class.Element*, i32, %class.PacketBatch*)**, void (%class.Element*, i32, %class.PacketBatch*)*** %334, align 8, !tbaa !20285
  %336 = getelementptr inbounds void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %335, i64 5
  %337 = load void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %336, align 8
  tail call void %337(%class.Element* %331, i32 %333, %class.PacketBatch* nonnull %317)
  br label %339

338:                                              ; preds = %319
  tail call void @_ZN11PacketBatch9fast_killEv(%class.PacketBatch* nonnull %317)
  br label %339

339:                                              ; preds = %338, %327, %315
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %340 = load i32, i32* %4, align 4, !tbaa !25477
  %341 = add nsw i32 %340, 1
  %342 = zext i32 %341 to i64
  %343 = icmp ult i64 %indvars.iv.next, %342
  br i1 %343, label %315, label %.loopexit

.loopexit:                                        ; preds = %339, %309
  ret void
}

define internal i8* @_ZNK10HashSwitch10class_nameEv(%class.HashSwitch* nocapture readnone %0) unnamed_addr #4 comdat align 2 {
  ret i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.260.13264, i64 0, i64 0)
}

define internal i8* @_ZNK10HashSwitch10port_countEv(%class.HashSwitch* nocapture readnone %0) unnamed_addr #4 comdat align 2 {
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14.8022, i64 0, i64 0)
}

define internal i8* @_ZNK10HashSwitch10processingEv(%class.HashSwitch* nocapture readnone %0) unnamed_addr #4 comdat align 2 {
  ret i8* getelementptr inbounds ([2 x i8], [2 x i8]* @_ZN7Element4PUSHE, i64 0, i64 0)
}

define dso_local i32 @_ZN10HashSwitch9configureER6VectorI6StringLm16EEP12ErrorHandler(%class.HashSwitch* %0, %class.Vector.0* dereferenceable(16) %1, %class.ErrorHandler* %2) unnamed_addr #0 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca %class.Args, align 8
  %5 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 0, i32 0, i32 6, i64 1
  %6 = load i32, i32* %5, align 4, !tbaa !20283
  %7 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 3
  store i32 %6, i32* %7, align 4, !tbaa !25477
  %8 = bitcast %class.Args* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %8) #34
  %9 = bitcast %class.Args* %4 to %class.HashSwitch**
  store %class.HashSwitch* %0, %class.HashSwitch** %9, align 8, !tbaa !20294
  %10 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 0, i32 1
  store %class.ErrorHandler* %2, %class.ErrorHandler** %10, align 8, !tbaa !20296
  %11 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 0, i32 2
  store i8* null, i8** %11, align 8, !tbaa !20297
  %12 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 0, i32 3
  store i8 0, i8* %12, align 8, !tbaa !20298
  %13 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 5
  %14 = bitcast %class.Vector.2* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %14, i8 0, i64 16, i1 false) #34
  invoke void @_ZN4Args10initializeEPK6VectorI6StringLm16EE(%class.Args* nonnull %4, %class.Vector.0* nonnull %1)
          to label %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit unwind label %15

15:                                               ; preds = %3
  %16 = landingpad { i8*, i32 }
          cleanup
  %17 = bitcast %class.Vector.2* %13 to i8**
  %18 = load i8*, i8** %17, align 8, !tbaa !20299
  %19 = icmp eq i8* %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %15
  call void @_ZdaPv(i8* nonnull %18) #55
  br label %21

21:                                               ; preds = %20, %15
  resume { i8*, i32 } %16

_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit: ; preds = %3
  %22 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 1
  invoke fastcc void @_Z14args_base_readIiEvP4ArgsPKciRT_(%class.Args* nonnull %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.9167, i64 0, i64 0), i32 3, i32* nonnull dereferenceable(4) %22)
          to label %23 unwind label %.loopexit.split-lp

23:                                               ; preds = %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit
  %24 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 2
  invoke fastcc void @_Z14args_base_readIiEvP4ArgsPKciRT_(%class.Args* nonnull %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3.11753, i64 0, i64 0), i32 3, i32* nonnull dereferenceable(4) %24)
          to label %25 unwind label %.loopexit.split-lp

25:                                               ; preds = %23
  invoke fastcc void @_Z14args_base_readIiEvP4ArgsPKciRT_(%class.Args* nonnull %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7501, i64 0, i64 0), i32 0, i32* nonnull dereferenceable(4) %7)
          to label %26 unwind label %.loopexit.split-lp

26:                                               ; preds = %25
  invoke void @_ZN4Args14check_completeEv(%class.Args* nonnull %4)
          to label %.noexc unwind label %.loopexit.split-lp

.noexc:                                           ; preds = %26
  %27 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 2
  %28 = load i8, i8* %27, align 2, !tbaa !20301, !range !20292
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %_ZN4Args8completeEv.exit, label %30

30:                                               ; preds = %.noexc
  %31 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 6
  %32 = load %"struct.Args::Slot"*, %"struct.Args::Slot"** %31, align 8, !tbaa !20304
  %33 = icmp eq %"struct.Args::Slot"* %32, null
  br i1 %33, label %.loopexit3, label %34

34:                                               ; preds = %30
  %35 = bitcast %"struct.Args::Slot"** %31 to i64*
  br label %39

.loopexit3:                                       ; preds = %.noexc1, %30
  %36 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 3
  %37 = load i8, i8* %36, align 1, !tbaa !20305
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %.loopexit, label %.preheader

39:                                               ; preds = %.noexc1, %34
  %40 = phi %"struct.Args::Slot"* [ %32, %34 ], [ %51, %.noexc1 ]
  %41 = getelementptr inbounds %"struct.Args::Slot", %"struct.Args::Slot"* %40, i64 0, i32 1
  %42 = bitcast %"struct.Args::Slot"** %41 to i64*
  %43 = load i64, i64* %42, align 8, !tbaa !20306
  store i64 %43, i64* %35, align 8, !tbaa !20304
  %44 = bitcast %"struct.Args::Slot"* %40 to void (%"struct.Args::Slot"*)***
  %45 = load void (%"struct.Args::Slot"*)**, void (%"struct.Args::Slot"*)*** %44, align 8, !tbaa !20285
  %46 = getelementptr inbounds void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %45, i64 2
  %47 = load void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %46, align 8
  invoke void %47(%"struct.Args::Slot"* nonnull %40)
          to label %.noexc1 unwind label %.loopexit2

.noexc1:                                          ; preds = %39
  %48 = load void (%"struct.Args::Slot"*)**, void (%"struct.Args::Slot"*)*** %44, align 8, !tbaa !20285
  %49 = getelementptr inbounds void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %48, i64 1
  %50 = load void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %49, align 8
  call void %50(%"struct.Args::Slot"* nonnull %40) #34
  %51 = load %"struct.Args::Slot"*, %"struct.Args::Slot"** %31, align 8, !tbaa !20304
  %52 = icmp eq %"struct.Args::Slot"* %51, null
  br i1 %52, label %.loopexit3, label %39

.loopexit:                                        ; preds = %.preheader, %.loopexit3
  %53 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 0
  store i8 0, i8* %53, align 8, !tbaa !20287
  store i8 0, i8* %36, align 1, !tbaa !20305
  call void @_ZN4ArgsD2Ev(%class.Args* nonnull %4) #34
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %8) #34
  %54 = load i32, i32* %24, align 8, !tbaa !25474
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %78, label %80

.preheader:                                       ; preds = %.preheader, %.loopexit3
  %56 = phi i32 [ %73, %.preheader ], [ 0, %.loopexit3 ]
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 %57
  %59 = load i8, i8* %58, align 1, !tbaa !20287
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i32 %56, 1
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 %62
  %64 = add nuw nsw i32 %61, %60
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 %65
  %67 = bitcast i8* %66 to i8**
  %68 = load i8*, i8** %67, align 8, !tbaa !20284
  %69 = zext i8 %59 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* nonnull align 1 %63, i64 %69, i1 false)
  %70 = load i8, i8* %58, align 1, !tbaa !20287
  %71 = zext i8 %70 to i32
  %72 = add i32 %56, 9
  %73 = add i32 %72, %71
  %74 = load i8, i8* %36, align 1, !tbaa !20305
  %75 = zext i8 %74 to i32
  %76 = icmp ult i32 %73, %75
  br i1 %76, label %.preheader, label %.loopexit

_ZN4Args8completeEv.exit:                         ; preds = %.noexc
  call void @_ZN4ArgsD2Ev(%class.Args* nonnull %4) #34
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %8) #34
  br label %80

.loopexit2:                                       ; preds = %39
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %77

.loopexit.split-lp:                               ; preds = %26, %25, %23, %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %77

77:                                               ; preds = %.loopexit.split-lp, %.loopexit2
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %.loopexit2 ], [ %lpad.loopexit.split-lp, %.loopexit.split-lp ]
  call void @_ZN4ArgsD2Ev(%class.Args* nonnull %4) #34
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %8) #34
  resume { i8*, i32 } %lpad.phi

78:                                               ; preds = %.loopexit
  %79 = call i32 (%class.ErrorHandler*, i8*, ...) @_ZN12ErrorHandler5errorEPKcz(%class.ErrorHandler* %2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3.6730, i64 0, i64 0))
  br label %80

80:                                               ; preds = %78, %_ZN4Args8completeEv.exit, %.loopexit
  %81 = phi i32 [ %79, %78 ], [ -1, %_ZN4Args8completeEv.exit ], [ 0, %.loopexit ]
  ret i32 %81
}

define dso_local i32 @_ZN10HashSwitch7processEP6Packet(%class.HashSwitch* nocapture readonly %0, %class.Packet* nocapture readonly %1) local_unnamed_addr #21 align 2 {
  %3 = getelementptr inbounds %class.Packet, %class.Packet* %1, i64 0, i32 3
  %4 = load i8*, i8** %3, align 8, !tbaa !20399
  %5 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4, !tbaa !25472
  %7 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8, !tbaa !25474
  %9 = getelementptr inbounds %class.Packet, %class.Packet* %1, i64 0, i32 4
  %10 = bitcast i8** %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !20396
  %12 = ptrtoint i8* %4 to i64
  %13 = sub i64 %11, %12
  %14 = trunc i64 %13 to i32
  %15 = add nsw i32 %8, %6
  %16 = icmp sgt i32 %15, %14
  br i1 %16, label %208, label %17

17:                                               ; preds = %2
  %18 = icmp sgt i32 %8, 0
  br i1 %18, label %19, label %.loopexit

19:                                               ; preds = %17
  %20 = sext i32 %6 to i64
  %21 = sext i32 %15 to i64
  %22 = sub nsw i64 %21, %20
  %23 = icmp ult i64 %22, 32
  br i1 %23, label %24, label %27

24:                                               ; preds = %.loopexit3, %19
  %25 = phi i64 [ %20, %19 ], [ %29, %.loopexit3 ]
  %26 = phi i32 [ 0, %19 ], [ %187, %.loopexit3 ]
  br label %192

27:                                               ; preds = %19
  %28 = and i64 %22, -32
  %29 = add nsw i64 %28, %20
  %30 = add nsw i64 %28, -32
  %31 = lshr exact i64 %30, 5
  %32 = add nuw nsw i64 %31, 1
  %33 = and i64 %32, 3
  %34 = icmp ult i64 %30, 96
  br i1 %34, label %.loopexit4, label %35

35:                                               ; preds = %27
  %36 = sub nsw i64 %32, %33
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi i64 [ 0, %35 ], [ %131, %37 ]
  %39 = phi <8 x i32> [ zeroinitializer, %35 ], [ %127, %37 ]
  %40 = phi <8 x i32> [ zeroinitializer, %35 ], [ %128, %37 ]
  %41 = phi <8 x i32> [ zeroinitializer, %35 ], [ %129, %37 ]
  %42 = phi <8 x i32> [ zeroinitializer, %35 ], [ %130, %37 ]
  %43 = phi i64 [ %36, %35 ], [ %132, %37 ]
  %44 = add i64 %38, %20
  %45 = getelementptr inbounds i8, i8* %4, i64 %44
  %46 = bitcast i8* %45 to <8 x i8>*
  %47 = load <8 x i8>, <8 x i8>* %46, align 1, !tbaa !20287
  %48 = getelementptr inbounds i8, i8* %45, i64 8
  %49 = bitcast i8* %48 to <8 x i8>*
  %50 = load <8 x i8>, <8 x i8>* %49, align 1, !tbaa !20287
  %51 = getelementptr inbounds i8, i8* %45, i64 16
  %52 = bitcast i8* %51 to <8 x i8>*
  %53 = load <8 x i8>, <8 x i8>* %52, align 1, !tbaa !20287
  %54 = getelementptr inbounds i8, i8* %45, i64 24
  %55 = bitcast i8* %54 to <8 x i8>*
  %56 = load <8 x i8>, <8 x i8>* %55, align 1, !tbaa !20287
  %57 = zext <8 x i8> %47 to <8 x i32>
  %58 = zext <8 x i8> %50 to <8 x i32>
  %59 = zext <8 x i8> %53 to <8 x i32>
  %60 = zext <8 x i8> %56 to <8 x i32>
  %61 = add <8 x i32> %39, %57
  %62 = add <8 x i32> %40, %58
  %63 = add <8 x i32> %41, %59
  %64 = add <8 x i32> %42, %60
  %65 = or i64 %38, 32
  %66 = add i64 %65, %20
  %67 = getelementptr inbounds i8, i8* %4, i64 %66
  %68 = bitcast i8* %67 to <8 x i8>*
  %69 = load <8 x i8>, <8 x i8>* %68, align 1, !tbaa !20287
  %70 = getelementptr inbounds i8, i8* %67, i64 8
  %71 = bitcast i8* %70 to <8 x i8>*
  %72 = load <8 x i8>, <8 x i8>* %71, align 1, !tbaa !20287
  %73 = getelementptr inbounds i8, i8* %67, i64 16
  %74 = bitcast i8* %73 to <8 x i8>*
  %75 = load <8 x i8>, <8 x i8>* %74, align 1, !tbaa !20287
  %76 = getelementptr inbounds i8, i8* %67, i64 24
  %77 = bitcast i8* %76 to <8 x i8>*
  %78 = load <8 x i8>, <8 x i8>* %77, align 1, !tbaa !20287
  %79 = zext <8 x i8> %69 to <8 x i32>
  %80 = zext <8 x i8> %72 to <8 x i32>
  %81 = zext <8 x i8> %75 to <8 x i32>
  %82 = zext <8 x i8> %78 to <8 x i32>
  %83 = add <8 x i32> %61, %79
  %84 = add <8 x i32> %62, %80
  %85 = add <8 x i32> %63, %81
  %86 = add <8 x i32> %64, %82
  %87 = or i64 %38, 64
  %88 = add i64 %87, %20
  %89 = getelementptr inbounds i8, i8* %4, i64 %88
  %90 = bitcast i8* %89 to <8 x i8>*
  %91 = load <8 x i8>, <8 x i8>* %90, align 1, !tbaa !20287
  %92 = getelementptr inbounds i8, i8* %89, i64 8
  %93 = bitcast i8* %92 to <8 x i8>*
  %94 = load <8 x i8>, <8 x i8>* %93, align 1, !tbaa !20287
  %95 = getelementptr inbounds i8, i8* %89, i64 16
  %96 = bitcast i8* %95 to <8 x i8>*
  %97 = load <8 x i8>, <8 x i8>* %96, align 1, !tbaa !20287
  %98 = getelementptr inbounds i8, i8* %89, i64 24
  %99 = bitcast i8* %98 to <8 x i8>*
  %100 = load <8 x i8>, <8 x i8>* %99, align 1, !tbaa !20287
  %101 = zext <8 x i8> %91 to <8 x i32>
  %102 = zext <8 x i8> %94 to <8 x i32>
  %103 = zext <8 x i8> %97 to <8 x i32>
  %104 = zext <8 x i8> %100 to <8 x i32>
  %105 = add <8 x i32> %83, %101
  %106 = add <8 x i32> %84, %102
  %107 = add <8 x i32> %85, %103
  %108 = add <8 x i32> %86, %104
  %109 = or i64 %38, 96
  %110 = add i64 %109, %20
  %111 = getelementptr inbounds i8, i8* %4, i64 %110
  %112 = bitcast i8* %111 to <8 x i8>*
  %113 = load <8 x i8>, <8 x i8>* %112, align 1, !tbaa !20287
  %114 = getelementptr inbounds i8, i8* %111, i64 8
  %115 = bitcast i8* %114 to <8 x i8>*
  %116 = load <8 x i8>, <8 x i8>* %115, align 1, !tbaa !20287
  %117 = getelementptr inbounds i8, i8* %111, i64 16
  %118 = bitcast i8* %117 to <8 x i8>*
  %119 = load <8 x i8>, <8 x i8>* %118, align 1, !tbaa !20287
  %120 = getelementptr inbounds i8, i8* %111, i64 24
  %121 = bitcast i8* %120 to <8 x i8>*
  %122 = load <8 x i8>, <8 x i8>* %121, align 1, !tbaa !20287
  %123 = zext <8 x i8> %113 to <8 x i32>
  %124 = zext <8 x i8> %116 to <8 x i32>
  %125 = zext <8 x i8> %119 to <8 x i32>
  %126 = zext <8 x i8> %122 to <8 x i32>
  %127 = add <8 x i32> %105, %123
  %128 = add <8 x i32> %106, %124
  %129 = add <8 x i32> %107, %125
  %130 = add <8 x i32> %108, %126
  %131 = add i64 %38, 128
  %132 = add i64 %43, -4
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %.loopexit4, label %37, !llvm.loop !25482

.loopexit4:                                       ; preds = %37, %27
  %134 = phi <8 x i32> [ undef, %27 ], [ %127, %37 ]
  %135 = phi <8 x i32> [ undef, %27 ], [ %128, %37 ]
  %136 = phi <8 x i32> [ undef, %27 ], [ %129, %37 ]
  %137 = phi <8 x i32> [ undef, %27 ], [ %130, %37 ]
  %138 = phi i64 [ 0, %27 ], [ %131, %37 ]
  %139 = phi <8 x i32> [ zeroinitializer, %27 ], [ %127, %37 ]
  %140 = phi <8 x i32> [ zeroinitializer, %27 ], [ %128, %37 ]
  %141 = phi <8 x i32> [ zeroinitializer, %27 ], [ %129, %37 ]
  %142 = phi <8 x i32> [ zeroinitializer, %27 ], [ %130, %37 ]
  %143 = icmp eq i64 %33, 0
  br i1 %143, label %.loopexit3, label %.preheader

.preheader:                                       ; preds = %.preheader, %.loopexit4
  %144 = phi i64 [ %171, %.preheader ], [ %138, %.loopexit4 ]
  %145 = phi <8 x i32> [ %167, %.preheader ], [ %139, %.loopexit4 ]
  %146 = phi <8 x i32> [ %168, %.preheader ], [ %140, %.loopexit4 ]
  %147 = phi <8 x i32> [ %169, %.preheader ], [ %141, %.loopexit4 ]
  %148 = phi <8 x i32> [ %170, %.preheader ], [ %142, %.loopexit4 ]
  %149 = phi i64 [ %172, %.preheader ], [ %33, %.loopexit4 ]
  %150 = add i64 %144, %20
  %151 = getelementptr inbounds i8, i8* %4, i64 %150
  %152 = bitcast i8* %151 to <8 x i8>*
  %153 = load <8 x i8>, <8 x i8>* %152, align 1, !tbaa !20287
  %154 = getelementptr inbounds i8, i8* %151, i64 8
  %155 = bitcast i8* %154 to <8 x i8>*
  %156 = load <8 x i8>, <8 x i8>* %155, align 1, !tbaa !20287
  %157 = getelementptr inbounds i8, i8* %151, i64 16
  %158 = bitcast i8* %157 to <8 x i8>*
  %159 = load <8 x i8>, <8 x i8>* %158, align 1, !tbaa !20287
  %160 = getelementptr inbounds i8, i8* %151, i64 24
  %161 = bitcast i8* %160 to <8 x i8>*
  %162 = load <8 x i8>, <8 x i8>* %161, align 1, !tbaa !20287
  %163 = zext <8 x i8> %153 to <8 x i32>
  %164 = zext <8 x i8> %156 to <8 x i32>
  %165 = zext <8 x i8> %159 to <8 x i32>
  %166 = zext <8 x i8> %162 to <8 x i32>
  %167 = add <8 x i32> %145, %163
  %168 = add <8 x i32> %146, %164
  %169 = add <8 x i32> %147, %165
  %170 = add <8 x i32> %148, %166
  %171 = add nuw i64 %144, 32
  %172 = add nsw i64 %149, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %.loopexit3, label %.preheader, !llvm.loop !25483

.loopexit3:                                       ; preds = %.preheader, %.loopexit4
  %174 = phi <8 x i32> [ %134, %.loopexit4 ], [ %167, %.preheader ]
  %175 = phi <8 x i32> [ %135, %.loopexit4 ], [ %168, %.preheader ]
  %176 = phi <8 x i32> [ %136, %.loopexit4 ], [ %169, %.preheader ]
  %177 = phi <8 x i32> [ %137, %.loopexit4 ], [ %170, %.preheader ]
  %178 = add <8 x i32> %175, %174
  %179 = add <8 x i32> %176, %178
  %180 = add <8 x i32> %177, %179
  %181 = shufflevector <8 x i32> %180, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %182 = add <8 x i32> %180, %181
  %183 = shufflevector <8 x i32> %182, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %184 = add <8 x i32> %182, %183
  %185 = shufflevector <8 x i32> %184, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %186 = add <8 x i32> %184, %185
  %187 = extractelement <8 x i32> %186, i32 0
  %188 = icmp eq i64 %22, %28
  br i1 %188, label %.loopexit, label %24

.loopexit:                                        ; preds = %192, %.loopexit3, %17
  %189 = phi i32 [ 0, %17 ], [ %187, %.loopexit3 ], [ %198, %192 ]
  %190 = getelementptr inbounds %class.HashSwitch, %class.HashSwitch* %0, i64 0, i32 3
  %191 = load i32, i32* %190, align 4, !tbaa !25477
  switch i32 %191, label %206 [
    i32 8, label %201
    i32 4, label %201
    i32 2, label %201
  ]

192:                                              ; preds = %192, %24
  %193 = phi i64 [ %199, %192 ], [ %25, %24 ]
  %194 = phi i32 [ %198, %192 ], [ %26, %24 ]
  %195 = getelementptr inbounds i8, i8* %4, i64 %193
  %196 = load i8, i8* %195, align 1, !tbaa !20287
  %197 = zext i8 %196 to i32
  %198 = add nuw nsw i32 %194, %197
  %199 = add nsw i64 %193, 1
  %200 = icmp slt i64 %199, %21
  br i1 %200, label %192, label %.loopexit, !llvm.loop !25484

201:                                              ; preds = %.loopexit, %.loopexit, %.loopexit
  %202 = lshr i32 %189, 4
  %203 = xor i32 %202, %189
  %204 = add nsw i32 %191, -1
  %205 = and i32 %204, %203
  br label %208

206:                                              ; preds = %.loopexit
  %207 = srem i32 %189, %191
  br label %208

208:                                              ; preds = %206, %201, %2
  %209 = phi i32 [ 0, %2 ], [ %205, %201 ], [ %207, %206 ]
  ret i32 %209
}



/***  hashswitch.hh ***/

#ifndef CLICK_HASHSWITCH_HH
#define CLICK_HASHSWITCH_HH
#include <click/batchelement.hh>
CLICK_DECLS

/*
 * =c
 * HashSwitch(OFFSET, LENGTH)
 * =s classification
 * classifies packets by hash of contents
 * =d
 * Can have any number of outputs.
 * Chooses the output on which to emit each packet based on
 * a hash of the LENGTH bytes starting at OFFSET.
 * Could be used for stochastic fair queuing.
 * =e
 * This element expects IP packets and chooses the output
 * based on a hash of the IP destination address:
 *
 *   HashSwitch(16, 4)
 * =a
 * Switch, RoundRobinSwitch, StrideSwitch, RandomSwitch
 */

class HashSwitch : public BatchElement {

    int _offset;
    int _length;
    int _max;

 public:

    HashSwitch() CLICK_COLD;

    const char *class_name() const override        { return "HashSwitch"; }
    const char *port_count() const override        { return "1/1-"; }
    const char *processing() const override        { return PUSH; }

    int configure(Vector<String> &, ErrorHandler *) CLICK_COLD;

    int process(Packet *);
    void push(int port, Packet *);
#if HAVE_BATCH
    void push_batch(int port, PacketBatch *);
#endif

};

CLICK_ENDDECLS
#endif


/***  hashswitch.cc ***/

/*
 * hashswitch.{cc,hh} -- element demultiplexes packets based on hash of
 * specified packet fields
 * Eddie Kohler
 *
 * Computational batching support by Georgios Katsikas
 *
 * Copyright (c) 1999-2000 Massachusetts Institute of Technology
 * Copyright (c) 2018 Georgios Katsikas, RISE SICS
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, subject to the conditions
 * listed in the Click LICENSE file. These conditions include: you must
 * preserve this copyright notice, and you cannot mention the copyright
 * holders in advertising related to the Software without their permission.
 * The Software is provided WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED. This
 * notice is a summary of the Click LICENSE file; the license in that file is
 * legally binding.
 */

#include <click/config.h>
#include "hashswitch.hh"
#include <click/error.hh>
#include <click/args.hh>
CLICK_DECLS

HashSwitch::HashSwitch() : _offset(-1)
{
}

int
HashSwitch::configure(Vector<String> &conf, ErrorHandler *errh)
{
    _max = noutputs();
    if (Args(conf, this, errh)
        .read_mp("OFFSET", _offset)
        .read_mp("LENGTH", _length)
        .read("MAX", _max)
        .complete() < 0)
    return -1;

    if (_length == 0)
        return errh->error("length must be > 0");

    return 0;
}

int
HashSwitch::process(Packet *p)
{
    const unsigned char *data = p->data();
    int o = _offset, l = _length;
    if ((int)p->length() < o + l)
        return 0;
    else {
        int d = 0;
        for (int i = o; i < o + l; i++)
            d += data[i];
        int n = _max;
        if (n == 2 || n == 4 || n == 8)
            return (d ^ (d>>4)) & (n-1);
        else
            return (d % n);
    }
}

void
HashSwitch::push(int port, Packet *p)
{
    output(process(p)).push(p);
}

#if HAVE_BATCH
void
HashSwitch::push_batch(int port, PacketBatch *batch)
{
    auto fnt = [this, port](Packet *p) { return process(p); };
    CLASSIFY_EACH_PACKET(_max + 1, fnt, batch, checked_output_push_batch);
}
#endif

CLICK_ENDDECLS
EXPORT_ELEMENT(HashSwitch)
ELEMENT_MT_SAFE(HashSwitch)


