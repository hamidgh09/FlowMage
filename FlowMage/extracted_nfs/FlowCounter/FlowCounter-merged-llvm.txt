/***  FlowCounter_llvm.txt ***/

define dso_local void @_ZN11FlowCounterC2Ev(%class.FlowCounter* %0) unnamed_addr #2 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
_ZN23VirtualFlowSpaceElementC2Ev.exit:
  %1 = getelementptr %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %2 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i8 0, i8* %3, align 4, !tbaa !20277
  %4 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 0
  %5 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %4, i64 0, i32 0
  store %class.Element* null, %class.Element** %5, align 8, !tbaa !20278
  %6 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 0, i32 1
  store i32 -2, i32* %6, align 8, !tbaa !20280
  %7 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 1, i32 0
  store %class.Element* null, %class.Element** %7, align 8, !tbaa !20278
  %8 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 1, i32 1
  store i32 -2, i32* %8, align 8, !tbaa !20280
  %9 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 2, i32 0
  store %class.Element* null, %class.Element** %9, align 8, !tbaa !20278
  %10 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 2, i32 1
  store i32 -2, i32* %10, align 8, !tbaa !20280
  %11 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 3, i32 0
  store %class.Element* null, %class.Element** %11, align 8, !tbaa !20278
  %12 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 3, i32 1
  store i32 -2, i32* %12, align 8, !tbaa !20280
  %13 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7
  store %class.Router* null, %class.Router** %13, align 8, !tbaa !20281
  %14 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8
  store i32 -1, i32* %14, align 8, !tbaa !20282
  %15 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10
  %16 = bitcast %class.Vector* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(17) %16, i8 0, i64 17, i1 false) #34
  %17 = load i32, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %19 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 1
  store %"class.Element::Port"* %4, %"class.Element::Port"** %19, align 8, !tbaa !20284
  %20 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 0
  store %"class.Element::Port"* %4, %"class.Element::Port"** %20, align 8, !tbaa !20284
  %21 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i64 1
  store i32 0, i32* %21, align 4, !tbaa !20283
  %22 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i64 0
  store i32 0, i32* %22, align 8, !tbaa !20283
  %23 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 1
  store i32 -1, i32* %23, align 4, !tbaa !22530
  store i32 2, i32* %2, align 8, !tbaa !20267
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [45 x i8*] }, { [45 x i8*] }* @_ZTV11FlowCounter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !20285
  %24 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 1
  %25 = load i32, i32* @click_nthreads, align 4, !tbaa !20283
  %26 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 1, i32 1
  store i32 %25, i32* %26, align 8, !tbaa !22534
  %27 = zext i32 %25 to i64
  %28 = shl nuw nsw i64 %27, 6
  %29 = tail call noalias i8* @aligned_alloc(i64 64, i64 %28) #34
  %30 = load i32, i32* %26, align 8, !tbaa !22534
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %_ZN23VirtualFlowSpaceElementC2Ev.exit
  %33 = bitcast %class.per_thread.6091* %24 to i8**
  store i8* %29, i8** %33, align 8, !tbaa !22536
  br label %.loopexit

34:                                               ; preds = %_ZN23VirtualFlowSpaceElementC2Ev.exit
  %35 = zext i32 %30 to i64
  %36 = shl nuw nsw i64 %35, 6
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %29, i8 0, i64 %36, i1 false)
  %37 = getelementptr inbounds %class.per_thread.6091, %class.per_thread.6091* %24, i64 0, i32 0
  %38 = bitcast %class.per_thread.6091* %24 to i8**
  store i8* %29, i8** %38, align 8, !tbaa !22536
  %39 = getelementptr inbounds i8, i8* %29, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %39, i8 0, i64 16, i1 false) #34
  %40 = icmp eq i32 %30, 1
  br i1 %40, label %.loopexit, label %41

41:                                               ; preds = %34
  %42 = bitcast i8* %29 to %"struct.per_thread<FlowCounter::fcstate>::A_t"*
  %43 = getelementptr inbounds i8, i8* %29, i64 80
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %43, i8 0, i64 16, i1 false) #34
  %44 = icmp ugt i32 %30, 2
  br i1 %44, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %._crit_edge, %41
  %45 = phi %"struct.per_thread<FlowCounter::fcstate>::A_t"* [ %.pre, %._crit_edge ], [ %42, %41 ]
  %46 = phi i64 [ %49, %._crit_edge ], [ 2, %41 ]
  %47 = getelementptr inbounds %"struct.per_thread<FlowCounter::fcstate>::A_t", %"struct.per_thread<FlowCounter::fcstate>::A_t"* %45, i64 %46, i32 0, i32 2
  %48 = bitcast %class.Vector.2* %47 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %48, i8 0, i64 16, i1 false) #34
  %49 = add nuw nsw i64 %46, 1
  %50 = load i32, i32* %26, align 8, !tbaa !22534
  %51 = zext i32 %50 to i64
  %52 = icmp ult i64 %49, %51
  br i1 %52, label %._crit_edge, label %.loopexit

._crit_edge:                                      ; preds = %.preheader
  %.pre = load %"struct.per_thread<FlowCounter::fcstate>::A_t"*, %"struct.per_thread<FlowCounter::fcstate>::A_t"** %37, align 8, !tbaa !22536
  br label %.preheader

.loopexit:                                        ; preds = %.preheader, %41, %34, %32
  ret void
}

define internal void @_ZN11FlowCounterD2Ev(%class.FlowCounter* %0) unnamed_addr #7 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %2 = getelementptr %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [45 x i8*] }, { [45 x i8*] }* @_ZTV11FlowCounter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !20285
  %3 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 1, i32 1
  %5 = load i32, i32* %4, align 8, !tbaa !22534
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %27, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.per_thread.6091, %class.per_thread.6091* %3, i64 0, i32 0
  br label %12

9:                                                ; preds = %22
  %10 = bitcast %class.per_thread.6091* %3 to i8**
  %11 = load i8*, i8** %10, align 8, !tbaa !22536
  tail call void @free(i8* %11) #34
  store i32 0, i32* %4, align 8, !tbaa !22534
  br label %27

12:                                               ; preds = %22, %7
  %13 = phi i32 [ %5, %7 ], [ %23, %22 ]
  %14 = phi i64 [ 0, %7 ], [ %24, %22 ]
  %15 = load %"struct.per_thread<FlowCounter::fcstate>::A_t"*, %"struct.per_thread<FlowCounter::fcstate>::A_t"** %8, align 8, !tbaa !22536
  %16 = getelementptr inbounds %"struct.per_thread<FlowCounter::fcstate>::A_t", %"struct.per_thread<FlowCounter::fcstate>::A_t"* %15, i64 %14, i32 0, i32 2
  %17 = bitcast %class.Vector.2* %16 to i8**
  %18 = load i8*, i8** %17, align 8, !tbaa !20299
  %19 = icmp eq i8* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %12
  tail call void @_ZdaPv(i8* nonnull %18) #55
  %21 = load i32, i32* %4, align 8, !tbaa !22534
  br label %22

22:                                               ; preds = %20, %12
  %23 = phi i32 [ %13, %12 ], [ %21, %20 ]
  %24 = add nuw nsw i64 %14, 1
  %25 = zext i32 %23 to i64
  %26 = icmp ult i64 %24, %25
  br i1 %26, label %12, label %9

27:                                               ; preds = %9, %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [38 x i8*] }, { [38 x i8*] }* @_ZTV7Element, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !20285
  %28 = load i32, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %29 = add nsw i32 %28, -1
  store i32 %29, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %30 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 0
  %31 = load %"class.Element::Port"*, %"class.Element::Port"** %30, align 8, !tbaa !20284
  %32 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 0
  %33 = icmp uge %"class.Element::Port"* %31, %32
  %34 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  %35 = bitcast [2 x i32]* %34 to %"class.Element::Port"*
  %36 = icmp ule %"class.Element::Port"* %31, %35
  %37 = and i1 %36, %33
  %38 = icmp eq %"class.Element::Port"* %31, null
  %39 = or i1 %38, %37
  br i1 %39, label %42, label %40

40:                                               ; preds = %27
  %41 = bitcast %"class.Element::Port"* %31 to i8*
  tail call void @_ZdaPv(i8* %41) #55
  br label %42

42:                                               ; preds = %40, %27
  %43 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 1
  %44 = load %"class.Element::Port"*, %"class.Element::Port"** %43, align 8, !tbaa !20284
  %45 = icmp uge %"class.Element::Port"* %44, %32
  %46 = icmp ule %"class.Element::Port"* %44, %35
  %47 = and i1 %46, %45
  %48 = icmp eq %"class.Element::Port"* %44, null
  %49 = or i1 %48, %47
  br i1 %49, label %52, label %50

50:                                               ; preds = %42
  %51 = bitcast %"class.Element::Port"* %44 to i8*
  tail call void @_ZdaPv(i8* %51) #55
  br label %52

52:                                               ; preds = %50, %42
  %53 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10
  %54 = bitcast %class.Vector* %53 to i8**
  %55 = load i8*, i8** %54, align 8, !tbaa !20288
  %56 = icmp eq i8* %55, null
  br i1 %56, label %_ZN11FlowElementD2Ev.exit, label %57

57:                                               ; preds = %52
  tail call void @_ZdaPv(i8* nonnull %55) #55
  br label %_ZN11FlowElementD2Ev.exit

_ZN11FlowElementD2Ev.exit:                        ; preds = %57, %52
  ret void
}

define internal void @_ZN11FlowCounterD0Ev(%class.FlowCounter* %0) unnamed_addr #7 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %2 = getelementptr %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [45 x i8*] }, { [45 x i8*] }* @_ZTV11FlowCounter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !20285
  %3 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 1, i32 1
  %5 = load i32, i32* %4, align 8, !tbaa !22534
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %27, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.per_thread.6091, %class.per_thread.6091* %3, i64 0, i32 0
  br label %12

9:                                                ; preds = %22
  %10 = bitcast %class.per_thread.6091* %3 to i8**
  %11 = load i8*, i8** %10, align 8, !tbaa !22536
  tail call void @free(i8* %11) #34
  store i32 0, i32* %4, align 8, !tbaa !22534
  br label %27

12:                                               ; preds = %22, %7
  %13 = phi i32 [ %5, %7 ], [ %23, %22 ]
  %14 = phi i64 [ 0, %7 ], [ %24, %22 ]
  %15 = load %"struct.per_thread<FlowCounter::fcstate>::A_t"*, %"struct.per_thread<FlowCounter::fcstate>::A_t"** %8, align 8, !tbaa !22536
  %16 = getelementptr inbounds %"struct.per_thread<FlowCounter::fcstate>::A_t", %"struct.per_thread<FlowCounter::fcstate>::A_t"* %15, i64 %14, i32 0, i32 2
  %17 = bitcast %class.Vector.2* %16 to i8**
  %18 = load i8*, i8** %17, align 8, !tbaa !20299
  %19 = icmp eq i8* %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %12
  tail call void @_ZdaPv(i8* nonnull %18) #55
  %21 = load i32, i32* %4, align 8, !tbaa !22534
  br label %22

22:                                               ; preds = %20, %12
  %23 = phi i32 [ %13, %12 ], [ %21, %20 ]
  %24 = add nuw nsw i64 %14, 1
  %25 = zext i32 %23 to i64
  %26 = icmp ult i64 %24, %25
  br i1 %26, label %12, label %9

27:                                               ; preds = %9, %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [38 x i8*] }, { [38 x i8*] }* @_ZTV7Element, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !20285
  %28 = load i32, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %29 = add nsw i32 %28, -1
  store i32 %29, i32* @_ZN7Element19nelements_allocatedE, align 4, !tbaa !20283
  %30 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 0
  %31 = load %"class.Element::Port"*, %"class.Element::Port"** %30, align 8, !tbaa !20284
  %32 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i64 0
  %33 = icmp uge %"class.Element::Port"* %31, %32
  %34 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  %35 = bitcast [2 x i32]* %34 to %"class.Element::Port"*
  %36 = icmp ule %"class.Element::Port"* %31, %35
  %37 = and i1 %36, %33
  %38 = icmp eq %"class.Element::Port"* %31, null
  %39 = or i1 %38, %37
  br i1 %39, label %42, label %40

40:                                               ; preds = %27
  %41 = bitcast %"class.Element::Port"* %31 to i8*
  tail call void @_ZdaPv(i8* %41) #55
  br label %42

42:                                               ; preds = %40, %27
  %43 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 1
  %44 = load %"class.Element::Port"*, %"class.Element::Port"** %43, align 8, !tbaa !20284
  %45 = icmp uge %"class.Element::Port"* %44, %32
  %46 = icmp ule %"class.Element::Port"* %44, %35
  %47 = and i1 %46, %45
  %48 = icmp eq %"class.Element::Port"* %44, null
  %49 = or i1 %48, %47
  br i1 %49, label %52, label %50

50:                                               ; preds = %42
  %51 = bitcast %"class.Element::Port"* %44 to i8*
  tail call void @_ZdaPv(i8* %51) #55
  br label %52

52:                                               ; preds = %50, %42
  %53 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10
  %54 = bitcast %class.Vector* %53 to i8**
  %55 = load i8*, i8** %54, align 8, !tbaa !20288
  %56 = icmp eq i8* %55, null
  br i1 %56, label %_ZN11FlowElementD2Ev.exit, label %57

57:                                               ; preds = %52
  tail call void @_ZdaPv(i8* nonnull %55) #55
  br label %_ZN11FlowElementD2Ev.exit

_ZN11FlowElementD2Ev.exit:                        ; preds = %57, %52
  ret void
}

define internal void @_ZN16FlowStateElementI11FlowCounteri14DefaultCheckerE10push_batchEiP11PacketBatch(%class.FlowStateElement* nocapture readonly %0, i32 %1, %class.PacketBatch* %2) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %2, i64 48, i32 0
  %5 = getelementptr inbounds i8, i8* %4, i64 24
  %6 = bitcast i8* %5 to i16*
  %7 = load i16, i16* %6, align 2, !tbaa !20287
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  tail call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.259.16395, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6.13925, i64 0, i64 0), i32 439, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__._ZN11PacketBatch5countEv.13926, i64 0, i64 0)) #57
  unreachable

10:                                               ; preds = %3
  %11 = zext i16 %7 to i64
  %12 = shl nuw nsw i64 %11, 3
  %13 = tail call i8* @_Znam(i64 %12) #56
  %14 = bitcast i8* %13 to i32**
  %15 = bitcast %class.PacketBatch* %2 to %class.Packet*
  %16 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %2, i64 136
  %17 = bitcast %class.PacketBatch* %16 to %class.Packet**
  %18 = load %class.FlowControlBlock**, %class.FlowControlBlock*** @fcb_queue, align 8, !tbaa !20284
  %19 = getelementptr inbounds %class.FlowStateElement, %class.FlowStateElement* %0, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4, !tbaa !22530
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %class.FlowStateElement, %class.FlowStateElement* %0, i64 1
  %23 = bitcast %class.FlowStateElement* %22 to %"struct.per_thread<FlowCounter::fcstate>::A_t"**
  %24 = load i32, i32* @click_current_thread_id, align 4
  %25 = and i32 %24, 65535
  %26 = zext i32 %25 to i64
  br label %27

27:                                               ; preds = %55, %10
  %28 = phi i64 [ 0, %10 ], [ %56, %55 ]
  %29 = phi %class.Packet** [ %17, %10 ], [ %57, %55 ]
  %30 = phi %class.Packet* [ %15, %10 ], [ %31, %55 ]
  %31 = load %class.Packet*, %class.Packet** %29, align 8, !tbaa !20284
  %32 = getelementptr inbounds %class.Packet, %class.Packet* %30, i64 0, i32 6, i32 0, i32 0, i64 4
  %33 = bitcast i64* %32 to i32*
  %34 = load i32, i32* %33, align 4, !tbaa !20287
  %35 = and i32 %34, 255
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %class.FlowControlBlock*, %class.FlowControlBlock** %18, i64 %36
  %38 = load %class.FlowControlBlock*, %class.FlowControlBlock** %37, align 8, !tbaa !20284
  %39 = getelementptr inbounds %class.FlowControlBlock, %class.FlowControlBlock* %38, i64 0, i32 5
  %40 = bitcast %union.anon.28.5842* %39 to [0 x i8]*
  %41 = getelementptr inbounds [0 x i8], [0 x i8]* %40, i64 0, i64 %21
  %42 = getelementptr inbounds i8, i8* %41, i64 4
  %43 = load i8, i8* %42, align 1, !tbaa !22532, !range !20292
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %51

45:                                               ; preds = %27
  %46 = load %"struct.per_thread<FlowCounter::fcstate>::A_t"*, %"struct.per_thread<FlowCounter::fcstate>::A_t"** %23, align 8, !tbaa !22536
  %47 = getelementptr inbounds %"struct.per_thread<FlowCounter::fcstate>::A_t", %"struct.per_thread<FlowCounter::fcstate>::A_t"* %46, i64 %26, i32 0, i32 0
  %48 = bitcast i64* %47 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 64, !tbaa !20341
  %50 = add nsw <2 x i64> %49, <i64 1, i64 1>
  store <2 x i64> %50, <2 x i64>* %48, align 64, !tbaa !20341
  store i8 1, i8* %42, align 1, !tbaa !22532
  br label %51

51:                                               ; preds = %45, %27
  %52 = getelementptr inbounds i32*, i32** %14, i64 %28
  %53 = bitcast i32** %52 to i8**
  store i8* %41, i8** %53, align 8, !tbaa !20284
  %54 = icmp eq %class.Packet* %31, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %51
  %56 = add nuw i64 %28, 1
  %57 = getelementptr inbounds %class.Packet, %class.Packet* %31, i64 0, i32 6, i32 6
  br label %27

58:                                               ; preds = %51
  %59 = load %class.Packet*, %class.Packet** %17, align 8, !tbaa !20284
  %60 = load i32*, i32** %14, align 8, !tbaa !20284
  %61 = load i32, i32* %60, align 4, !tbaa !20283
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %60, align 4, !tbaa !20283
  %63 = icmp eq %class.Packet* %59, null
  br i1 %63, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %.preheader, %58
  %64 = phi %class.Packet* [ %68, %.preheader ], [ %59, %58 ]
  %65 = phi i64 [ %66, %.preheader ], [ 0, %58 ]
  %66 = add nuw i64 %65, 1
  %67 = getelementptr inbounds %class.Packet, %class.Packet* %64, i64 0, i32 6, i32 6
  %68 = load %class.Packet*, %class.Packet** %67, align 8, !tbaa !20284
  %69 = getelementptr inbounds i32*, i32** %14, i64 %66
  %70 = load i32*, i32** %69, align 8, !tbaa !20284
  %71 = load i32, i32* %70, align 4, !tbaa !20283
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %70, align 4, !tbaa !20283
  %73 = icmp eq %class.Packet* %68, null
  br i1 %73, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %.preheader, %58
  %74 = getelementptr inbounds %class.FlowStateElement, %class.FlowStateElement* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 6, i64 1
  %75 = load i32, i32* %74, align 4, !tbaa !20283
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %.loopexit
  tail call void @__assert_fail(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.56.14329, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.96.15137, i64 0, i64 0), i32 568, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__PRETTY_FUNCTION__._ZNK7Element4portEbi.14331, i64 0, i64 0)) #57
  unreachable

78:                                               ; preds = %.loopexit
  %79 = getelementptr inbounds %class.FlowStateElement, %class.FlowStateElement* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 1
  %80 = load %"class.Element::Port"*, %"class.Element::Port"** %79, align 8, !tbaa !20284
  %81 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %80, i64 0, i32 0
  %82 = load %class.Element*, %class.Element** %81, align 8, !tbaa !20278
  %83 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %80, i64 0, i32 1
  %84 = load i32, i32* %83, align 8, !tbaa !20280
  %85 = bitcast %class.Element* %82 to void (%class.Element*, i32, %class.PacketBatch*)***
  %86 = load void (%class.Element*, i32, %class.PacketBatch*)**, void (%class.Element*, i32, %class.PacketBatch*)*** %85, align 8, !tbaa !20285
  %87 = getelementptr inbounds void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %86, i64 5
  %88 = load void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %87, align 8
  tail call void %88(%class.Element* %82, i32 %84, %class.PacketBatch* %2)
  ret void
}

define internal i8* @_ZNK11FlowCounter10class_nameEv(%class.FlowCounter* nocapture readnone %0) unnamed_addr #4 comdat align 2 {
  ret i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.86.13090, i64 0, i64 0)
}

define internal i8* @_ZNK11FlowCounter10port_countEv(%class.FlowCounter* nocapture readnone %0) unnamed_addr #4 comdat align 2 {
  ret i8* getelementptr inbounds ([2 x i8], [2 x i8]* @_ZN7Element9PORTS_1_1E, i64 0, i64 0)
}

define internal i8* @_ZNK11FlowCounter10processingEv(%class.FlowCounter* nocapture readnone %0) unnamed_addr #4 comdat align 2 {
  ret i8* getelementptr inbounds ([2 x i8], [2 x i8]* @_ZN7Element4PUSHE, i64 0, i64 0)
}

define dso_local i32 @_ZN11FlowCounter9configureER6VectorI6StringLm16EEP12ErrorHandler(%class.FlowCounter* %0, %class.Vector.0* dereferenceable(16) %1, %class.ErrorHandler* %2) unnamed_addr #0 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = alloca %class.Args, align 8
  %5 = bitcast %class.Args* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %5) #34
  %6 = bitcast %class.Args* %4 to %class.FlowCounter**
  store %class.FlowCounter* %0, %class.FlowCounter** %6, align 8, !tbaa !20294
  %7 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 0, i32 1
  store %class.ErrorHandler* %2, %class.ErrorHandler** %7, align 8, !tbaa !20296
  %8 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 0, i32 2
  store i8* null, i8** %8, align 8, !tbaa !20297
  %9 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 0, i32 3
  store i8 0, i8* %9, align 8, !tbaa !20298
  %10 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 5
  %11 = bitcast %class.Vector.2* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %11, i8 0, i64 16, i1 false) #34
  invoke void @_ZN4Args10initializeEPK6VectorI6StringLm16EE(%class.Args* nonnull %4, %class.Vector.0* nonnull %1)
          to label %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit unwind label %12

12:                                               ; preds = %3
  %13 = landingpad { i8*, i32 }
          cleanup
  %14 = bitcast %class.Vector.2* %10 to i8**
  %15 = load i8*, i8** %14, align 8, !tbaa !20299
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %12
  call void @_ZdaPv(i8* nonnull %15) #55
  br label %18

18:                                               ; preds = %17, %12
  resume { i8*, i32 } %13

_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit: ; preds = %3
  invoke void @_ZN4Args14check_completeEv(%class.Args* nonnull %4)
          to label %.noexc unwind label %.loopexit.split-lp

.noexc:                                           ; preds = %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit
  %19 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 2
  %20 = load i8, i8* %19, align 2, !tbaa !20301, !range !20292
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %_ZN4Args8completeEv.exit, label %22

22:                                               ; preds = %.noexc
  %23 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 6
  %24 = load %"struct.Args::Slot"*, %"struct.Args::Slot"** %23, align 8, !tbaa !20304
  %25 = icmp eq %"struct.Args::Slot"* %24, null
  br i1 %25, label %.loopexit3, label %26

26:                                               ; preds = %22
  %27 = bitcast %"struct.Args::Slot"** %23 to i64*
  br label %31

.loopexit3:                                       ; preds = %.noexc1, %22
  %28 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 3
  %29 = load i8, i8* %28, align 1, !tbaa !20305
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %.loopexit, label %.preheader

31:                                               ; preds = %.noexc1, %26
  %32 = phi %"struct.Args::Slot"* [ %24, %26 ], [ %43, %.noexc1 ]
  %33 = getelementptr inbounds %"struct.Args::Slot", %"struct.Args::Slot"* %32, i64 0, i32 1
  %34 = bitcast %"struct.Args::Slot"** %33 to i64*
  %35 = load i64, i64* %34, align 8, !tbaa !20306
  store i64 %35, i64* %27, align 8, !tbaa !20304
  %36 = bitcast %"struct.Args::Slot"* %32 to void (%"struct.Args::Slot"*)***
  %37 = load void (%"struct.Args::Slot"*)**, void (%"struct.Args::Slot"*)*** %36, align 8, !tbaa !20285
  %38 = getelementptr inbounds void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %37, i64 2
  %39 = load void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %38, align 8
  invoke void %39(%"struct.Args::Slot"* nonnull %32)
          to label %.noexc1 unwind label %.loopexit2

.noexc1:                                          ; preds = %31
  %40 = load void (%"struct.Args::Slot"*)**, void (%"struct.Args::Slot"*)*** %36, align 8, !tbaa !20285
  %41 = getelementptr inbounds void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %40, i64 1
  %42 = load void (%"struct.Args::Slot"*)*, void (%"struct.Args::Slot"*)** %41, align 8
  call void %42(%"struct.Args::Slot"* nonnull %32) #34
  %43 = load %"struct.Args::Slot"*, %"struct.Args::Slot"** %23, align 8, !tbaa !20304
  %44 = icmp eq %"struct.Args::Slot"* %43, null
  br i1 %44, label %.loopexit3, label %31

.loopexit:                                        ; preds = %.preheader, %.loopexit3
  %45 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 0
  store i8 0, i8* %45, align 8, !tbaa !20287
  store i8 0, i8* %28, align 1, !tbaa !20305
  br label %_ZN4Args8completeEv.exit

.preheader:                                       ; preds = %.preheader, %.loopexit3
  %46 = phi i32 [ %63, %.preheader ], [ 0, %.loopexit3 ]
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 %47
  %49 = load i8, i8* %48, align 1, !tbaa !20287
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %46, 1
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 %52
  %54 = add nuw nsw i32 %51, %50
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds %class.Args, %class.Args* %4, i64 0, i32 7, i64 %55
  %57 = bitcast i8* %56 to i8**
  %58 = load i8*, i8** %57, align 8, !tbaa !20284
  %59 = zext i8 %49 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* nonnull align 1 %53, i64 %59, i1 false)
  %60 = load i8, i8* %48, align 1, !tbaa !20287
  %61 = zext i8 %60 to i32
  %62 = add i32 %46, 9
  %63 = add i32 %62, %61
  %64 = load i8, i8* %28, align 1, !tbaa !20305
  %65 = zext i8 %64 to i32
  %66 = icmp ult i32 %63, %65
  br i1 %66, label %.preheader, label %.loopexit

_ZN4Args8completeEv.exit:                         ; preds = %.loopexit, %.noexc
  %67 = phi i32 [ 0, %.loopexit ], [ -1, %.noexc ]
  call void @_ZN4ArgsD2Ev(%class.Args* nonnull %4) #34
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %5) #34
  ret i32 %67

.loopexit2:                                       ; preds = %31
  %lpad.loopexit = landingpad { i8*, i32 }
          cleanup
  br label %68

.loopexit.split-lp:                               ; preds = %_ZN4ArgsC2ERK6VectorI6StringLm16EEPK7ElementP12ErrorHandler.exit
  %lpad.loopexit.split-lp = landingpad { i8*, i32 }
          cleanup
  br label %68

68:                                               ; preds = %.loopexit.split-lp, %.loopexit2
  %lpad.phi = phi { i8*, i32 } [ %lpad.loopexit, %.loopexit2 ], [ %lpad.loopexit.split-lp, %.loopexit.split-lp ]
  call void @_ZN4ArgsD2Ev(%class.Args* nonnull %4) #34
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %5) #34
  resume { i8*, i32 } %lpad.phi
}

define dso_local void @_ZN11FlowCounter12add_handlersEv(%class.FlowCounter* readonly %0) unnamed_addr #0 align 2 {
  %2 = bitcast %class.FlowCounter* %0 to %class.Element*
  tail call void @_ZN7Element16add_read_handlerEPKcPF6StringPS_PvEij(%class.Element* %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27.12883, i64 0, i64 0), void (%class.String*, %class.Element*, i8*)* nonnull @_ZN11FlowCounter12read_handlerEP7ElementPv, i32 0, i32 0)
  ret void
}

define internal i64 @_ZNK16FlowStateElementI11FlowCounteri14DefaultCheckerE14flow_data_sizeEv(%class.FlowStateElement* nocapture readnone %0) unnamed_addr #4 comdat align 2 {
  ret i64 8
}

define internal i32 @_ZNK16FlowStateElementI11FlowCounteri14DefaultCheckerE21flow_announce_managerEP7ElementP12ErrorHandler(%class.FlowStateElement* %0, %class.Element* %1, %class.ErrorHandler* %2) unnamed_addr #0 comdat align 2 {
  %4 = bitcast %class.Element* %1 to i8* (%class.Element*, i8*)***
  %5 = load i8* (%class.Element*, i8*)**, i8* (%class.Element*, i8*)*** %4, align 8, !tbaa !20285
  %6 = getelementptr inbounds i8* (%class.Element*, i8*)*, i8* (%class.Element*, i8*)** %5, i64 17
  %7 = load i8* (%class.Element*, i8*)*, i8* (%class.Element*, i8*)** %6, align 8
  %8 = tail call i8* %7(%class.Element* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21.5833, i64 0, i64 0))
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  %11 = tail call i32 (%class.ErrorHandler*, i8*, ...) @_ZN12ErrorHandler7warningEPKcz(%class.ErrorHandler* %2, i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.22.5834, i64 0, i64 0), i32 15000, %class.FlowStateElement* %0, %class.Element* nonnull %1)
  br label %12

12:                                               ; preds = %10, %3
  ret i32 0
}

define dso_local void @_ZN11FlowCounter12read_handlerEP7ElementPv(%class.String* noalias nocapture sret %0, %class.Element* nocapture readonly %1, i8* readnone %2) #0 align 2 {
  %4 = icmp eq i8* %2, null
  br i1 %4, label %5, label %73

5:                                                ; preds = %3
  %6 = getelementptr inbounds %class.Element, %class.Element* %1, i64 1, i32 1
  %7 = load i32, i32* %6, align 8, !tbaa !22534
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %.loopexit, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.Element, %class.Element* %1, i64 1
  %11 = bitcast %class.Element* %10 to %"struct.per_thread<FlowCounter::fcstate>::A_t"**
  %12 = load %"struct.per_thread<FlowCounter::fcstate>::A_t"*, %"struct.per_thread<FlowCounter::fcstate>::A_t"** %11, align 8, !tbaa !22536
  %13 = icmp ult i32 %7, 17
  %14 = add i32 %7, -1
  %15 = icmp slt i32 %14, 0
  %16 = or i1 %13, %15
  br i1 %16, label %17, label %20

17:                                               ; preds = %54, %9
  %18 = phi i32 [ 0, %9 ], [ %24, %54 ]
  %19 = phi i64 [ 0, %9 ], [ %62, %54 ]
  br label %64

20:                                               ; preds = %9
  %21 = and i32 %7, 15
  %22 = icmp eq i32 %21, 0
  %23 = select i1 %22, i32 16, i32 %21
  %24 = sub i32 %7, %23
  br label %25

25:                                               ; preds = %25, %20
  %26 = phi i32 [ 0, %20 ], [ %51, %25 ]
  %27 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %20 ], [ %52, %25 ]
  %28 = phi <4 x i64> [ zeroinitializer, %20 ], [ %47, %25 ]
  %29 = phi <4 x i64> [ zeroinitializer, %20 ], [ %48, %25 ]
  %30 = phi <4 x i64> [ zeroinitializer, %20 ], [ %49, %25 ]
  %31 = phi <4 x i64> [ zeroinitializer, %20 ], [ %50, %25 ]
  %32 = add <4 x i32> %27, <i32 4, i32 4, i32 4, i32 4>
  %33 = add <4 x i32> %27, <i32 8, i32 8, i32 8, i32 8>
  %34 = add <4 x i32> %27, <i32 12, i32 12, i32 12, i32 12>
  %35 = sext <4 x i32> %27 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = getelementptr inbounds %"struct.per_thread<FlowCounter::fcstate>::A_t", %"struct.per_thread<FlowCounter::fcstate>::A_t"* %12, <4 x i64> %35, i32 0, i32 0
  %40 = getelementptr inbounds %"struct.per_thread<FlowCounter::fcstate>::A_t", %"struct.per_thread<FlowCounter::fcstate>::A_t"* %12, <4 x i64> %36, i32 0, i32 0
  %41 = getelementptr inbounds %"struct.per_thread<FlowCounter::fcstate>::A_t", %"struct.per_thread<FlowCounter::fcstate>::A_t"* %12, <4 x i64> %37, i32 0, i32 0
  %42 = getelementptr inbounds %"struct.per_thread<FlowCounter::fcstate>::A_t", %"struct.per_thread<FlowCounter::fcstate>::A_t"* %12, <4 x i64> %38, i32 0, i32 0
  %43 = tail call <4 x i64> @llvm.masked.gather.v4i64.v4p0i64(<4 x i64*> %39, i32 64, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i64> undef), !tbaa !22537
  %44 = tail call <4 x i64> @llvm.masked.gather.v4i64.v4p0i64(<4 x i64*> %40, i32 64, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i64> undef), !tbaa !22537
  %45 = tail call <4 x i64> @llvm.masked.gather.v4i64.v4p0i64(<4 x i64*> %41, i32 64, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i64> undef), !tbaa !22537
  %46 = tail call <4 x i64> @llvm.masked.gather.v4i64.v4p0i64(<4 x i64*> %42, i32 64, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i64> undef), !tbaa !22537
  %47 = add <4 x i64> %43, %28
  %48 = add <4 x i64> %44, %29
  %49 = add <4 x i64> %45, %30
  %50 = add <4 x i64> %46, %31
  %51 = add i32 %26, 16
  %52 = add <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %53 = icmp eq i32 %51, %24
  br i1 %53, label %54, label %25, !llvm.loop !22539

54:                                               ; preds = %25
  %55 = add <4 x i64> %48, %47
  %56 = add <4 x i64> %49, %55
  %57 = add <4 x i64> %50, %56
  %58 = shufflevector <4 x i64> %57, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %59 = add <4 x i64> %57, %58
  %60 = shufflevector <4 x i64> %59, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %61 = add <4 x i64> %59, %60
  %62 = extractelement <4 x i64> %61, i32 0
  br label %17

.loopexit:                                        ; preds = %64, %5
  %63 = phi i64 [ 0, %5 ], [ %70, %64 ]
  tail call void @_ZN6StringC2Em(%class.String* %0, i64 %63)
  br label %77

64:                                               ; preds = %64, %17
  %65 = phi i32 [ %71, %64 ], [ %18, %17 ]
  %66 = phi i64 [ %70, %64 ], [ %19, %17 ]
  %67 = sext i32 %65 to i64
  %68 = getelementptr inbounds %"struct.per_thread<FlowCounter::fcstate>::A_t", %"struct.per_thread<FlowCounter::fcstate>::A_t"* %12, i64 %67, i32 0, i32 0
  %69 = load i64, i64* %68, align 64, !tbaa !22537
  %70 = add i64 %69, %66
  %71 = add nuw i32 %65, 1
  %72 = icmp ult i32 %71, %7
  br i1 %72, label %64, label %.loopexit, !llvm.loop !22540

73:                                               ; preds = %3
  %74 = getelementptr inbounds %class.String, %class.String* %0, i64 0, i32 0, i32 0
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.75.15356, i64 0, i64 0), i8** %74, align 8, !tbaa !20330
  %75 = getelementptr inbounds %class.String, %class.String* %0, i64 0, i32 0, i32 1
  store i32 7, i32* %75, align 8, !tbaa !20308
  %76 = getelementptr inbounds %class.String, %class.String* %0, i64 0, i32 0, i32 2
  store %"struct.String::memo_t"* null, %"struct.String::memo_t"** %76, align 8, !tbaa !20316
  br label %77

77:                                               ; preds = %73, %.loopexit
  ret void
}

define dso_local void @_ZN11FlowCounter9push_flowEiPiP11PacketBatch(%class.FlowCounter* nocapture readonly %0, i32 %1, i32* nocapture %2, %class.PacketBatch* %3) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %3, i64 48, i32 0
  %6 = getelementptr inbounds i8, i8* %5, i64 24
  %7 = bitcast i8* %6 to i16*
  %8 = load i16, i16* %7, align 2, !tbaa !20287
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %4
  tail call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.259.16395, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6.13925, i64 0, i64 0), i32 439, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__PRETTY_FUNCTION__._ZN11PacketBatch5countEv.13926, i64 0, i64 0)) #57
  unreachable

11:                                               ; preds = %4
  %12 = zext i16 %8 to i32
  %13 = load i32, i32* %2, align 4, !tbaa !20283
  %14 = add i32 %13, %12
  store i32 %14, i32* %2, align 4, !tbaa !20283
  %15 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i64 1
  %16 = load i32, i32* %15, align 4, !tbaa !20283
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %11
  tail call void @__assert_fail(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.56.14329, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.96.15137, i64 0, i64 0), i32 568, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__PRETTY_FUNCTION__._ZNK7Element4portEbi.14331, i64 0, i64 0)) #57
  unreachable

19:                                               ; preds = %11
  %20 = getelementptr inbounds %class.FlowCounter, %class.FlowCounter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, i64 1
  %21 = load %"class.Element::Port"*, %"class.Element::Port"** %20, align 8, !tbaa !20284
  %22 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %21, i64 0, i32 0
  %23 = load %class.Element*, %class.Element** %22, align 8, !tbaa !20278
  %24 = getelementptr inbounds %"class.Element::Port", %"class.Element::Port"* %21, i64 0, i32 1
  %25 = load i32, i32* %24, align 8, !tbaa !20280
  %26 = bitcast %class.Element* %23 to void (%class.Element*, i32, %class.PacketBatch*)***
  %27 = load void (%class.Element*, i32, %class.PacketBatch*)**, void (%class.Element*, i32, %class.PacketBatch*)*** %26, align 8, !tbaa !20285
  %28 = getelementptr inbounds void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %27, i64 5
  %29 = load void (%class.Element*, i32, %class.PacketBatch*)*, void (%class.Element*, i32, %class.PacketBatch*)** %28, align 8
  tail call void %29(%class.Element* %23, i32 %25, %class.PacketBatch* nonnull %3)
  ret void
}

define dso_local void @_ZN11FlowCounter15push_flow_batchEiPPiP11PacketBatch(%class.FlowCounter* nocapture readnone %0, i32 %1, i32** nocapture readonly %2, %class.PacketBatch* readonly %3) local_unnamed_addr #3 align 2 {
  %5 = icmp eq %class.PacketBatch* %3, null
  br i1 %5, label %.loopexit, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.PacketBatch, %class.PacketBatch* %3, i64 136
  %8 = bitcast %class.PacketBatch* %7 to %class.Packet**
  %9 = load %class.Packet*, %class.Packet** %8, align 8, !tbaa !20284
  %10 = load i32*, i32** %2, align 8, !tbaa !20284
  %11 = load i32, i32* %10, align 4, !tbaa !20283
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %10, align 4, !tbaa !20283
  %13 = icmp eq %class.Packet* %9, null
  br i1 %13, label %.loopexit, label %.preheader

.preheader:                                       ; preds = %.preheader, %6
  %14 = phi %class.Packet* [ %18, %.preheader ], [ %9, %6 ]
  %15 = phi i64 [ %16, %.preheader ], [ 0, %6 ]
  %16 = add nuw i64 %15, 1
  %17 = getelementptr inbounds %class.Packet, %class.Packet* %14, i64 0, i32 6, i32 6
  %18 = load %class.Packet*, %class.Packet** %17, align 8, !tbaa !20284
  %19 = getelementptr inbounds i32*, i32** %2, i64 %16
  %20 = load i32*, i32** %19, align 8, !tbaa !20284
  %21 = load i32, i32* %20, align 4, !tbaa !20283
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %20, align 4, !tbaa !20283
  %23 = icmp eq %class.Packet* %18, null
  br i1 %23, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %.preheader, %6, %4
  ret void
}

define dso_local i32 @_ZN11FlowCounter13write_handlerERK6StringP7ElementPvP12ErrorHandler(%class.String* nocapture readnone dereferenceable(24) %0, %class.Element* nocapture readnone %1, i8* nocapture readnone %2, %class.ErrorHandler* nocapture readnone %3) local_unnamed_addr #4 align 2 {
  ret i32 -1
}



/***  flowelement.hh ***/

// -*- c-basic-offset: 4 -*-
#ifndef CLICK_FLOWELEMENT_HH
#define CLICK_FLOWELEMENT_HH
#include <click/glue.hh>
#include <click/vector.hh>
#include <click/string.hh>
#include <click/batchelement.hh>
#include <click/routervisitor.hh>
#include <click/pair.hh>
#include "flow.hh"


CLICK_DECLS

#ifdef HAVE_FLOW
# if HAVE_CTX
class CTXManager;
# endif
class VirtualFlowManager;

enum FlowType {
    FLOW_NONE = 0,
    FLOW_ETHER,
    FLOW_ARP,
    FLOW_IP,
    FLOW_TCP,
    FLOW_UDP,
    FLOW_ICMP,
    FLOW_HTTP
};

class FlowElement : public BatchElement {
public:
    FlowElement();
    ~FlowElement();

    //Those should actually be in some kind of base CTXElement
# if HAVE_CTX
    virtual FlowNode* get_table(int iport, Vector<FlowElement*> contextStack);

    virtual FlowNode* resolveContext(FlowType, Vector<FlowElement*> stack);
# endif
    virtual FlowType getContext(int port);

    virtual bool stopClassifier() { return false; };

#if HAVE_FLOW_DYNAMIC
    inline void fcb_acquire(int count = 1) {
        fcb_stack->acquire(count);
    }
    inline void fcb_update(int count) {
        if (count > 0)
            fcb_stack->acquire(count);
        else if (count < 0)
            fcb_stack->release(-count);
    }

    inline void fcb_release(int count = 1) {
        fcb_stack->release(count);
    }
#else
    inline void fcb_acquire(int count = 1) {
        (void)count;
    }
    inline void fcb_update(int) {}
    inline void fcb_release(int count = 1) {
        (void)count;
    }
#endif

};

/**
 * Element that needs FCB space
 */
class VirtualFlowSpaceElement : public FlowElement {
public:
    VirtualFlowSpaceElement();

    virtual const size_t flow_data_size() const = 0;
    virtual const int flow_data_index() const {
        return -1;
    }
    virtual const int flow_announce_manager(VirtualFlowManager* manager, ErrorHandler* errh)  const {
        return 0;
    }
    inline void set_flow_data_offset(int offset) {_flow_data_offset = offset; }
    inline int flow_data_offset() {return _flow_data_offset; }

    int configure_phase() const        { return CONFIGURE_PHASE_DEFAULT + 5; }

    void *cast(const char *name) override;


#if HAVE_CTX_GLOBAL_TIMEOUT
    inline void ctx_acquire_timeout(int nmsec) {
        //Do not set a smaller timeout
        if ((fcb_stack->flags & FLOW_TIMEOUT) && (nmsec <= (int)(fcb_stack->flags >> FLOW_TIMEOUT_SHIFT))) {
#if DEBUG_CLASSIFIER_TIMEOUT > 1
        click_chatter("Acquiring timeout of %p, not changing it, flag %d",this,fcb_stack->flags);
#endif
                return;
        }
#if DEBUG_CLASSIFIER_TIMEOUT > 1
        click_chatter("Acquiring timeout of %p to %d, flag %d",this,nmsec,fcb_stack->flags);
#endif
        fcb_stack->flags = (nmsec << FLOW_TIMEOUT_SHIFT) | FLOW_TIMEOUT | ((fcb_stack->flags & FLOW_TIMEOUT_INLIST) ? FLOW_TIMEOUT_INLIST : 0);
    }

    inline void ctx_release_timeout() {
#if DEBUG_CLASSIFIER_TIMEOUT > 1
        click_chatter("Releasing timeout of %p",this);
#endif
        //If the timeout is in list, we must not put it back in the pool
        if (fcb_stack->flags & FLOW_TIMEOUT_INLIST)
            assert(fcb_stack->flags & FLOW_TIMEOUT);
        if ((fcb_stack->flags & FLOW_TIMEOUT) && (fcb_stack->flags & FLOW_TIMEOUT_INLIST))
            fcb_stack->flags = 0 | FLOW_TIMEOUT | FLOW_TIMEOUT_INLIST;
        else
            fcb_stack->flags = 0;
    }
#else
    inline void ctx_acquire_timeout(int nmsec) {
        //TODO : use a local timer
        fcb_acquire();
    }

    inline void ctx_release_timeout() {
        fcb_release();
    }
#endif

#if HAVE_FLOW_DYNAMIC
    inline void fcb_set_release_fnt(struct FlowReleaseChain* fcb_chain, SubFlowRealeaseFnt fnt) {
        fcb_chain->previous_fnt = fcb_stack->release_fnt;
        fcb_chain->previous_thunk = fcb_stack->thunk;
        fcb_stack->release_fnt = fnt;
        fcb_stack->thunk = this;
#if DEBUG_CLASSIFIER_RELEASE
        click_chatter("Release fnt set to %p, was %p",fcb_stack->release_fnt,fcb_chain->previous_fnt);
#endif
    }
    inline void fcb_remove_release_fnt(struct FlowReleaseChain* fcb_chain, SubFlowRealeaseFnt fnt) {
        debug_flow("Release fnt remove %p",fnt);
        if (likely(fcb_stack->release_fnt == fnt)) { //Normally it will call the chain in the same order
            fcb_stack->release_fnt = fcb_chain->previous_fnt;
            fcb_stack->thunk = fcb_chain->previous_thunk;
            debug_flow("Release removed is now to %p",fcb_stack->release_fnt);
        } else {
            SubFlowRealeaseFnt chain_fnt = fcb_stack->release_fnt;
            VirtualFlowSpaceElement* fe = static_cast<VirtualFlowSpaceElement*>(fcb_stack->thunk);
            FlowReleaseChain* frc;
            do {
                if (fe == 0) {
                    click_chatter("BAD ERROR : Trying to remove a timeout flow function that is not set...");
                    return;
                }

                frc = reinterpret_cast<FlowReleaseChain*>(&fcb_stack->data[fe->_flow_data_offset]);
                chain_fnt = frc->previous_fnt;
                if (chain_fnt == 0) {
                    click_chatter("ERROR : Trying to remove a timeout flow function that is not set...");
                    return;
                }
                fe = static_cast<VirtualFlowSpaceElement*>(frc->previous_thunk);
            } while (chain_fnt != fnt);
            frc->previous_fnt = fcb_chain->previous_fnt;
            frc->previous_thunk = fcb_chain->previous_thunk;
        }
    }
#else
    inline void fcb_set_release_fnt(struct FlowReleaseChain*, SubFlowRealeaseFnt) {
        click_chatter("ERROR: YOU MUST HAVE DYNAMIC FLOW RELEASE FNT fct setted !");
        assert(false);
    }
#endif


    virtual PacketBatch* pull_batch(int port, unsigned max) override final {
        click_chatter("ERROR : Flow Elements do not support pull");
        return 0;
    }

    int initialize(ErrorHandler *errh) override CLICK_COLD {
        //The element itself is automatically posted by build_fcb via  fcb_builded_init_future
        return 0;
    }
protected:

    int _flow_data_offset;
    friend class FlowBufferVisitor;
    friend class VirtualFlowManager;
};

# if HAVE_FLOW_DYNAMIC
class UnstackVisitor : public RouterVisitor {
public:
    bool visit(Element *e, bool isoutput, int port,
                   Element *from_e, int from_port, int distance);

};
# endif



/**
 * This future will only trigger once it is called N times.
 * N is increased by calling add(). The typical usage is a future
 * that will only trigger when all parents have called. To do this,
 * you call add() in the constructor of the parents.
 */
class CounterInitFuture : public Router::ChildrenFuture { public:
    CounterInitFuture(String name, std::function<int(ErrorHandler*)> on_reached);
    CounterInitFuture(String name, std::function<void(void)> on_reached);

    virtual void notifyParent(InitFuture* future) override;

    virtual int solve_initialize(ErrorHandler* errh) override;

    virtual int completed(ErrorHandler* errh) override;
private:
    int _n;
    String _name;
    std::function<int(ErrorHandler*)> _on_reached;
};

/**
 * Element that allocates some FCB Space
 */
class VirtualFlowManager : public FlowElement { public:
    VirtualFlowManager();

    static CounterInitFuture* fcb_builded_init_future() {
        return &_fcb_builded_init_future;
    }

    static CounterInitFuture _fcb_builded_init_future;

protected:
    int _reserve;

    typedef Pair<Element*,int> EDPair;
    Vector<EDPair>  _reachable_list;

    static Vector<VirtualFlowManager*> _entries;


    void find_children(int verbose = 0);

    static void _build_fcb(int verbose,  bool ordered);
    static void build_fcb();
    virtual void fcb_built() {

    }

    bool stopClassifier() { return true; };

    friend class CTXElement;
};


template<typename T> class FlowSpaceElement : public VirtualFlowSpaceElement {

public :

    FlowSpaceElement() CLICK_COLD;

    void fcb_set_init_data(FlowControlBlock* fcb, const T data) CLICK_COLD;

    virtual const size_t flow_data_size()  const override { return sizeof(T); }


    /**
     * Return the T type for a given FCB
     */
    inline T* fcb_data_for(FlowControlBlock* fcb) {
        T* flowdata = static_cast<T*>((void*)&fcb->data[_flow_data_offset]);
        return flowdata;
    }

    /**
     * Return the T type in the current FCB on the stack
     */
    inline T* fcb_data() {
        return fcb_data_for(fcb_stack);
    }

    void push_batch(int port, PacketBatch* head) final {
            push_flow(port, fcb_data(), head);
    };

    virtual void push_flow(int port, T* flowdata, PacketBatch* head) = 0;
};

class DefaultChecker { public:
    struct str  {
        bool seen;
    };
    static inline bool seen(void*, str* s) {
        return s->seen;;
    }
    static inline void mark_seen(void*, str* s) {
        s->seen = true;
    }
    static inline void release(void*, str* s) {
        s->seen = false;
    }
};

/**
 * FlowStateElement is like FlowSpaceElement but handle a timeout and a release functions
 *
 * The child must implement :
 * static const int timeout; //Timeout in msec for a flow
 * bool new_flow(T*, Packet*);
 * void push_batch(int port, T*, Packet*);
 * void release_flow(T*);
 *
 * close_flow() can be called to release the flow now, remove timer etc It will not call your release_flow(); automatically, do it before. A packet coming for the same flow after close_flow() is called will be considered from a new flow (seen flag is reset).
 */
template<class Derived, typename T, typename Checker = DefaultChecker> class FlowStateElement : public VirtualFlowSpaceElement {
    struct AT : public FlowReleaseChain {
        T v;
        typename Checker::str str;
    };
public :

    typedef FlowStateElement<Derived, T, Checker> derived;

    FlowStateElement() CLICK_COLD;

    virtual const size_t flow_data_size()  const { return sizeof(AT); }
    virtual const int flow_announce_manager(Element* manager, ErrorHandler* errh)  const {
        if (Derived::timeout > 0) {
            if (manager->cast("CTXManager") == 0) {
                errh->warning("The timeout of %dms of %p{element} is ignored, only the flow manager %p{element} timeout is prevalent.", Derived::timeout, this, manager);
            }
        }
        return 0;
     }

    /**
     * CRTP virtual
     */
    inline bool new_flow(T*, Packet*) {
        return true;
    }

    inline FlowControlBlock* stack_from_flow(void* ptr) {
        return (FlowControlBlock*)(((uint8_t*)ptr) - _flow_data_offset - sizeof(FlowControlBlock));
    }

    /**
     * Return the T type for a given FCB
     */
    inline T* fcb_data_for(FlowControlBlock* fcb) {
        AT* flowdata = static_cast<AT*>((void*)&fcb->data[_flow_data_offset]);
        return &flowdata->v;
    }

    /**
     * Return the T type in the current FCB on the stack
     */
    inline T* fcb_data() {
        return fcb_data_for(fcb_stack);
    }

    static void release_fnt(FlowControlBlock* fcb, void* thunk ) {
        Derived* derived = static_cast<Derived*>(thunk);
        AT* my_fcb = reinterpret_cast<AT*>(&fcb->data[derived->_flow_data_offset]);
        derived->release_flow(&my_fcb->v);
        if (my_fcb->previous_fnt)
            my_fcb->previous_fnt(fcb, my_fcb->previous_thunk);
    }

    void push_batch(int port, PacketBatch* head) {
#if FLOW_PUSH_BATCH
        T** fcbs = new T*[head->count()]; 
        int i = 0;

        int idx = 0;
        Packet* p = head->first();
        Packet* fep_next = ((p != 0)? p->next() : 0 );
        for (;p != 0;idx++,p=fep_next,fep_next=(p==0?0:p->next())) {
/*            if (idx < (head->count() - 2)){
                auto *next_fcb = *(fcb_queue+2);
                rte_prefetch0((void*)&next_fcb->data[_flow_data_offset]);
            }
*/
            auto my_fcb = my_fcb_data_from_queue(FLOW_ID_ANNO(p));
            if (!Checker::seen(&my_fcb->v, &my_fcb->str)) {
                if (likely(static_cast<Derived*>(this)->new_flow(&my_fcb->v, p))) {
                    Checker::mark_seen(&my_fcb->v, &my_fcb->str);
                    if (Derived::timeout > 0)
                        this->ctx_acquire_timeout(Derived::timeout);
#if HAVE_FLOW_DYNAMIC
                        this->fcb_set_release_fnt(my_fcb, &release_fnt);
#endif
                } else { //TODO set early drop?
                    head->fast_kill();
                    return;
                }
            }

           if(static_cast<Derived*>(this)->is_fcb_large())
               static_cast<Derived*>(this)->prefetch_fcb(0, &my_fcb->v);
           fcbs[i] = &my_fcb->v;
           i++;
        }

        static_cast<Derived*>(this)->push_flow_batch(port, fcbs, head);

        output_push_batch(0, head);
#else
         auto my_fcb = my_fcb_data();
         if (!Checker::seen(&my_fcb->v, &my_fcb->str)) {
             if (static_cast<Derived*>(this)->new_flow(&my_fcb->v, head->first())) {
                 Checker::mark_seen(&my_fcb->v, &my_fcb->str);
                 if (Derived::timeout > 0)
                     this->ctx_acquire_timeout(Derived::timeout);
#if HAVE_FLOW_DYNAMIC
                 this->fcb_set_release_fnt(my_fcb, &release_fnt);
#endif
             } else { //TODO set early drop?
                 head->fast_kill();
                 return;
             }
         }
         static_cast<Derived*>(this)->push_flow(port, &my_fcb->v, head);
#endif
    };

    void close_flow() {
        if (Derived::timeout > 0) {
            this->ctx_release_timeout();
        }
#if HAVE_FLOW_DYNAMIC
        this->fcb_remove_release_fnt(my_fcb_data(), &release_fnt);
#endif
        Checker::release(&my_fcb_data()->v, &my_fcb_data()->str);
    }

#if FLOW_PUSH_BATCH
    /* TODO: This should be virtual and implemented by each element, for now let's put an empty body for testing */
    void push_flow_batch(int port, T** flowdata, PacketBatch *head) {

    }
    void prefetch_fcb(int, T*) {

    }

    bool is_fcb_large(){
        return 0;
    }

#endif

private:
    inline AT* my_fcb_data() {
        return static_cast<AT*>((void*)&fcb_stack->data[_flow_data_offset]);
    }

#if FLOW_PUSH_BATCH
    inline AT* my_fcb_data_from_queue(uint8_t offset) {
        auto *fcb = *(fcb_queue + offset);
        return static_cast<AT*>((void*)&fcb->data[_flow_data_offset]);
    }
#endif

};


template<typename T, int index> class FlowSharedBufferElement : public FlowSpaceElement<T> {

public :

	FlowSharedBufferElement() : FlowSpaceElement<T>() {

	}

	const size_t flow_data_size()  const final { return sizeof(T); }
	const int flow_data_index()  const final { return index; }
};



#define DefineFlowSharedBuffer(name,type,index) class FlowSharedBuffer ## name ## Element : public FlowSharedBufferElement<type,index>{ };

DefineFlowSharedBuffer(Paint,int,0);
#define NR_SHARED_FLOW 1

class FlowElementVisitor : public RouterVisitor {
public:
    Element* origin;
	FlowElementVisitor(Element* e) : origin(e) {

	}

	struct inputref {
	    FlowElement* elem;
	    int iport;
	};
	Vector<struct inputref> dispatchers;

	bool visit(Element *e, bool isoutput, int port,
			       Element *from_e, int from_port, int distance) {
        (void)from_e;
        (void)from_port;
        (void)distance;
		FlowElement* dispatcher = dynamic_cast<FlowElement*>(e);
		if (dispatcher != NULL) {
		    if (dispatcher == origin)
		        return false;
		    struct inputref ref = {.elem = dispatcher, .iport = port};
			dispatchers.push_back(ref);
			return false;
		} else {

		}
        /*if (v.dispatchers[i] == (FlowElement*)e) {
            click_chatter("Classification loops are unsupported, place another CTXManager before reinjection of the packets.");
            e->router()->please_stop_driver();
            return 0;
        }*/
		return true;
	}

	static FlowNode* get_downward_table(Element* e, int output, Vector<FlowElement*> context, bool resolve_context = false);
};

/**
 * FlowSpaceElement
 */

template<typename T>
FlowSpaceElement<T>::FlowSpaceElement() : VirtualFlowSpaceElement() {
}

# if HAVE_CTX
template<typename T>
void FlowSpaceElement<T>::fcb_set_init_data(FlowControlBlock* fcb, const T data) {
    for (int i = 0; i < sizeof(T); i++) {
        if (fcb->data[FCBPool::init_data_size() + _flow_data_offset + i] && fcb->data[_flow_data_offset + i] != ((uint8_t*)&data)[i]) {
            click_chatter("In %p{element} for offset %d :",this, _flow_data_offset+i);
            click_chatter("Index [%d] : Cannot set data to %d, as it is already %d",i,*((T*)(&fcb->data[_flow_data_offset])),data);
            click_chatter("Is marked as set : %d", fcb->data[FCBPool::init_data_size() + _flow_data_offset + i]);
            fcb->reverse_print();

            click_chatter("It generally means your graph is messed up");
            assert(false);
        }
        fcb->data[FCBPool::init_data_size() + _flow_data_offset + i] = 0xff;
    }
    *((T*)(&fcb->data[_flow_data_offset])) = data;
}
# endif

/**
 * FlowSpaceElement
 */

template<class Derived, typename T, typename Checker>
FlowStateElement<Derived, T, Checker>::FlowStateElement() : VirtualFlowSpaceElement() {
}

/**
 * Macro to define context
 *
 * In practice it will overwrite get_table
 */
# if HAVE_CTX

#define DEFAULT_4TUPLE "12/0/ffffffff:HASH-3 16/0/ffffffff:HASH-3 20/0/ffffffff:HASH-3"

//Those should not be used anymore, as the FLOW_CONTEXT is a much better alternative that assuming the top session is IP...
#define TCP_SESSION "9/06! 12/0/ffffffff:HASH-3 16/0/ffffffff:HASH-3 20/0/ffffffff:HASH-3"
#define UDP_SESSION "9/11! 12/0/ffffffff:HASH-3 16/0/ffffffff:HASH-3 20/0/ffffffff:HASH-3"

//Use only one of the 3 following macros

/**
 * Define a context (such as FLOW_IP) but no rule/session
 */
#define FLOW_ELEMENT_DEFINE_CONTEXT(ft) \
FlowNode* get_table(int iport, Vector<FlowElement*> context) override CLICK_COLD {\
    context.push_back(this);\
    return FlowElement::get_table(iport, context);\
}\
virtual FlowType getContext(int) override {\
    return ft;\
}\

/**
 * Define a context (such as FLOW_TCP) and a rule/session definition
 */
#define FLOW_ELEMENT_DEFINE_SESSION_CONTEXT(rule,ft) \
FlowNode* get_table(int iport, Vector<FlowElement*> contextStack) override CLICK_COLD {\
    if (ft)\
        contextStack.push_back(this);\
    FlowNode* down = FlowElement::get_table(iport,contextStack); \
    FlowNode* my = FlowClassificationTable::parse(this,rule).root;\
    return my->combine(down, true, true, true, this);\
}\
virtual FlowType getContext(int) override {\
    return ft;\
}\

/**
 * Define only a rule/session definition but no context
 */
#define FLOW_ELEMENT_DEFINE_SESSION(rule) \
        FLOW_ELEMENT_DEFINE_SESSION_CONTEXT(rule,FLOW_NONE)

/**
 * Defin two rules/sessions but no context
 */
#define FLOW_ELEMENT_DEFINE_SESSION_DUAL(ruleA,ruleB) \
FlowNode* get_table(int iport, Vector<FlowElement*> context) override CLICK_COLD {\
    return FlowClassificationTable::parse(this,ruleA).root->combine(FlowClassificationTable::parse(this,ruleB).root,false,false,true,this)->combine(FlowElement::get_table(iport,context), true, true, true, this);\
}

/**
 * Define the context no matter the input port, and a rule but only for one specific port
 */
#define FLOW_ELEMENT_DEFINE_PORT_SESSION_CONTEXT(port_num,rule,ft) \
FlowNode* get_table(int iport, Vector<FlowElement*> contextStack) override {\
    if (iport == port_num) {\
        return FlowClassificationTable::parse(this,rule).root->combine(FlowElement::get_table(iport,contextStack), true, true, true, this);\
    }\
    if (ft)\
        contextStack.push_back(this);\
    return FlowElement::get_table(iport,contextStack);\
}\
virtual FlowType getContext(int) override {\
    return ft;\
}

#endif
#else //Not even HAVE_FLOW
typedef BatchElement FlowElement;
#endif
#if !defined(HAVE_CTX)
#define FLOW_ELEMENT_DEFINE_SESSION(rule,context)
#define FLOW_ELEMENT_DEFINE_PORT_CONTEXT(port,rule,context)
#define FLOW_ELEMENT_DEFINE_SESSION_DUAL(ruleA,ruleB)
#define FLOW_ELEMENT_DEFINE_SESSION_CONTEXT(rule,context)
#define FLOW_ELEMENT_DEFINE_PORT_SESSION_CONTEXT(port,rule,context)
#endif

CLICK_ENDDECLS

#endif


/***  flowcounter.hh ***/

#ifndef CLICK_FLOWCOUNTER_HH
#define CLICK_FLOWCOUNTER_HH
#include <click/element.hh>
#include <click/vector.hh>
#include <click/multithread.hh>
#include <click/flow/flowelement.hh>

CLICK_DECLS


/*
=c

FlowCounter([CLOSECONNECTION])

=s flow

Counts all flows passing by, the number of active flows, and the number of 
packets per flow.

 */


class FlowCounter : public FlowStateElement<FlowCounter,int>
{
public:
    /** @brief Construct an FlowCounter element
     */
    FlowCounter() CLICK_COLD;

    const char *class_name() const override        { return "FlowCounter"; }
    const char *port_count() const override        { return PORTS_1_1; }
    const char *processing() const override        { return PUSH; }

    int configure(Vector<String> &, ErrorHandler *) override CLICK_COLD;

    void release_flow(int* fcb) {
        _state->open--;
        if (_state->lengths.size() < *fcb) {
            _state->lengths.resize(*fcb, 0);
        }
        _state->lengths[*fcb - 1]++;
    }

    const static int timeout = 15000;

    void push_flow(int port, int* fcb, PacketBatch*);

#if FLOW_PUSH_BATCH
    void push_flow_batch(int port, int** fcb, PacketBatch *head);
#endif

    inline bool new_flow(void*, Packet*) {
        _state->count++;
        _state->open++;
        return true;
    }

    void add_handlers() override CLICK_COLD;
protected:


    struct fcstate {
        long count;
        long open;
        Vector<int> lengths;
    } CLICK_CACHE_ALIGN;
    per_thread<fcstate> _state;

    static String read_handler(Element *, void *) CLICK_COLD;
    static int write_handler(const String &, Element *, void *, ErrorHandler *) CLICK_COLD;
};

CLICK_ENDDECLS
#endif


/***  flowcounter.cc ***/

/*
 * flowcounter.{cc,hh} -- remove insults in web pages
 * Tom Barbette
 */

#include <click/config.h>
#include <click/router.hh>
#include <click/args.hh>
#include <click/error.hh>
#include "flowcounter.hh"

CLICK_DECLS

FlowCounter::FlowCounter()
{

}

int FlowCounter::configure(Vector<String> &conf, ErrorHandler *errh)
{
    if(Args(conf, this, errh)
    .complete() < 0)
        return -1;

    return 0;
}

void FlowCounter::push_flow(int, int* fcb, PacketBatch* flow)
{
    *fcb += flow->count();
    output_push_batch(0, flow);
}

#if FLOW_PUSH_BATCH
void FlowCounter::push_flow_batch(int port, int** fcb, PacketBatch *head) 
{
    int i = 0;
    FOR_EACH_PACKET_SAFE(head, p) {
        *fcb[i] += 1;
        i++;
    }
}
#endif

enum { h_count };

String
FlowCounter::read_handler(Element *e, void *thunk)
{
    FlowCounter *fd = static_cast<FlowCounter *>(e);
    switch ((intptr_t)thunk) {
      case h_count: {
          PER_THREAD_MEMBER_SUM(uint64_t,count, fd->_state, count);
          return String(count);
                    }
      default:
          return "<error>";
    }
}

int
FlowCounter::write_handler(const String &s_in, Element *e, void *thunk, ErrorHandler *errh)
{
    return -1;
}

void
FlowCounter::add_handlers() {
    add_read_handler("count", read_handler, h_count);
}

CLICK_ENDDECLS
EXPORT_ELEMENT(FlowCounter)
ELEMENT_MT_SAFE(FlowCounter)


